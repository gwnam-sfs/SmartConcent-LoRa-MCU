
test_osc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08002970  08002970  00012970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002a58  08002a58  00012a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002a60  08002a60  00012a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002a64  08002a64  00012a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08002a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          00000390  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000400  20000400  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000bab6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002356  00000000  00000000  0002bb56  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003380  00000000  00000000  0002deac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000760  00000000  00000000  00031230  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000868  00000000  00000000  00031990  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00003ede  00000000  00000000  000321f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00002b48  00000000  00000000  000360d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00038c1e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000197c  00000000  00000000  00038c9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002958 	.word	0x08002958

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08002958 	.word	0x08002958

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000582:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <HAL_InitTick+0x3c>)
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_InitTick+0x40>)
{
 8000586:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000588:	7818      	ldrb	r0, [r3, #0]
 800058a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000592:	6810      	ldr	r0, [r2, #0]
 8000594:	fbb0 f0f3 	udiv	r0, r0, r3
 8000598:	f000 f8aa 	bl	80006f0 <HAL_SYSTICK_Config>
 800059c:	4604      	mov	r4, r0
 800059e:	b958      	cbnz	r0, 80005b8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005a0:	2d0f      	cmp	r5, #15
 80005a2:	d809      	bhi.n	80005b8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a4:	4602      	mov	r2, r0
 80005a6:	4629      	mov	r1, r5
 80005a8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ac:	f000 f85e 	bl	800066c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <HAL_InitTick+0x44>)
 80005b2:	4620      	mov	r0, r4
 80005b4:	601d      	str	r5, [r3, #0]
 80005b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005b8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005ba:	bd38      	pop	{r3, r4, r5, pc}
 80005bc:	20000008 	.word	0x20000008
 80005c0:	20000000 	.word	0x20000000
 80005c4:	20000004 	.word	0x20000004

080005c8 <HAL_Init>:
{
 80005c8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ca:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <HAL_Init+0x30>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005d2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005da:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005e2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e4:	2003      	movs	r0, #3
 80005e6:	f000 f82f 	bl	8000648 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f7ff ffc8 	bl	8000580 <HAL_InitTick>
  HAL_MspInit();
 80005f0:	f001 f838 	bl	8001664 <HAL_MspInit>
}
 80005f4:	2000      	movs	r0, #0
 80005f6:	bd08      	pop	{r3, pc}
 80005f8:	40023c00 	.word	0x40023c00

080005fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005fc:	4a03      	ldr	r2, [pc, #12]	; (800060c <HAL_IncTick+0x10>)
 80005fe:	4b04      	ldr	r3, [pc, #16]	; (8000610 <HAL_IncTick+0x14>)
 8000600:	6811      	ldr	r1, [r2, #0]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	440b      	add	r3, r1
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	200002b8 	.word	0x200002b8
 8000610:	20000000 	.word	0x20000000

08000614 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000614:	4b01      	ldr	r3, [pc, #4]	; (800061c <HAL_GetTick+0x8>)
 8000616:	6818      	ldr	r0, [r3, #0]
}
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	200002b8 	.word	0x200002b8

08000620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000620:	b538      	push	{r3, r4, r5, lr}
 8000622:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000624:	f7ff fff6 	bl	8000614 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000628:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800062a:	bf1c      	itt	ne
 800062c:	4b05      	ldrne	r3, [pc, #20]	; (8000644 <HAL_Delay+0x24>)
 800062e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000630:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000632:	bf18      	it	ne
 8000634:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000636:	f7ff ffed 	bl	8000614 <HAL_GetTick>
 800063a:	1b40      	subs	r0, r0, r5
 800063c:	4284      	cmp	r4, r0
 800063e:	d8fa      	bhi.n	8000636 <HAL_Delay+0x16>
  {
  }
}
 8000640:	bd38      	pop	{r3, r4, r5, pc}
 8000642:	bf00      	nop
 8000644:	20000000 	.word	0x20000000

08000648 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000648:	4a07      	ldr	r2, [pc, #28]	; (8000668 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800064a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000650:	041b      	lsls	r3, r3, #16
 8000652:	0c1b      	lsrs	r3, r3, #16
 8000654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000658:	0200      	lsls	r0, r0, #8
 800065a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000662:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000664:	60d3      	str	r3, [r2, #12]
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	68dc      	ldr	r4, [r3, #12]
 8000672:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000676:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800067c:	2b04      	cmp	r3, #4
 800067e:	bf28      	it	cs
 8000680:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000682:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000684:	f04f 0501 	mov.w	r5, #1
 8000688:	fa05 f303 	lsl.w	r3, r5, r3
 800068c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000690:	bf8c      	ite	hi
 8000692:	3c03      	subhi	r4, #3
 8000694:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000696:	4019      	ands	r1, r3
 8000698:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800069a:	fa05 f404 	lsl.w	r4, r5, r4
 800069e:	3c01      	subs	r4, #1
 80006a0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80006a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a4:	ea42 0201 	orr.w	r2, r2, r1
 80006a8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	bfad      	iteet	ge
 80006ae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	f000 000f 	andlt.w	r0, r0, #15
 80006b6:	4b06      	ldrlt	r3, [pc, #24]	; (80006d0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	bfb5      	itete	lt
 80006be:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	bf00      	nop
 80006cc:	e000ed00 	.word	0xe000ed00
 80006d0:	e000ed14 	.word	0xe000ed14

080006d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006d4:	2800      	cmp	r0, #0
 80006d6:	db08      	blt.n	80006ea <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006d8:	0942      	lsrs	r2, r0, #5
 80006da:	2301      	movs	r3, #1
 80006dc:	f000 001f 	and.w	r0, r0, #31
 80006e0:	fa03 f000 	lsl.w	r0, r3, r0
 80006e4:	4b01      	ldr	r3, [pc, #4]	; (80006ec <HAL_NVIC_EnableIRQ+0x18>)
 80006e6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006ea:	4770      	bx	lr
 80006ec:	e000e100 	.word	0xe000e100

080006f0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f0:	3801      	subs	r0, #1
 80006f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006f6:	d20a      	bcs.n	800070e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	4a07      	ldr	r2, [pc, #28]	; (8000718 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006fc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fe:	21f0      	movs	r1, #240	; 0xf0
 8000700:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000704:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000706:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000708:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800070e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000e010 	.word	0xe000e010
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800071c:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800071e:	f001 f82d 	bl	800177c <HAL_SYSTICK_Callback>
 8000722:	bd08      	pop	{r3, pc}

08000724 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000724:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000728:	2b02      	cmp	r3, #2
 800072a:	d003      	beq.n	8000734 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800072c:	2380      	movs	r3, #128	; 0x80
 800072e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000730:	2001      	movs	r0, #1
 8000732:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000734:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000736:	2305      	movs	r3, #5
 8000738:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800073c:	6813      	ldr	r3, [r2, #0]
 800073e:	f023 0301 	bic.w	r3, r3, #1
 8000742:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000744:	2000      	movs	r0, #0
}
 8000746:	4770      	bx	lr

08000748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800074c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800074e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000750:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000900 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000754:	4a68      	ldr	r2, [pc, #416]	; (80008f8 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000756:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000904 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800075a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800075c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800075e:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000760:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000762:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000764:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000766:	42ac      	cmp	r4, r5
 8000768:	f040 80b0 	bne.w	80008cc <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800076c:	684c      	ldr	r4, [r1, #4]
 800076e:	f024 0c10 	bic.w	ip, r4, #16
 8000772:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000776:	2e01      	cmp	r6, #1
 8000778:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800077c:	d812      	bhi.n	80007a4 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 800077e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000780:	2603      	movs	r6, #3
 8000782:	fa06 f60e 	lsl.w	r6, r6, lr
 8000786:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800078a:	68ce      	ldr	r6, [r1, #12]
 800078c:	fa06 f60e 	lsl.w	r6, r6, lr
 8000790:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000792:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000794:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000796:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800079a:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800079e:	409e      	lsls	r6, r3
 80007a0:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80007a2:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007a4:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 80007a6:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007a8:	fa06 f60e 	lsl.w	r6, r6, lr
 80007ac:	43f6      	mvns	r6, r6
 80007ae:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007b2:	688f      	ldr	r7, [r1, #8]
 80007b4:	fa07 f70e 	lsl.w	r7, r7, lr
 80007b8:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007bc:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80007c0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007c2:	d116      	bne.n	80007f2 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 80007c4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80007c8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007cc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80007d0:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007d4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80007d8:	f04f 0c0f 	mov.w	ip, #15
 80007dc:	fa0c fc0b 	lsl.w	ip, ip, fp
 80007e0:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007e4:	690f      	ldr	r7, [r1, #16]
 80007e6:	fa07 f70b 	lsl.w	r7, r7, fp
 80007ea:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80007ee:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80007f2:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007f4:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007f6:	f004 0703 	and.w	r7, r4, #3
 80007fa:	fa07 fe0e 	lsl.w	lr, r7, lr
 80007fe:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000802:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000804:	00e6      	lsls	r6, r4, #3
 8000806:	d561      	bpl.n	80008cc <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000808:	f04f 0b00 	mov.w	fp, #0
 800080c:	f8cd b00c 	str.w	fp, [sp, #12]
 8000810:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000814:	4e39      	ldr	r6, [pc, #228]	; (80008fc <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800081a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800081e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000822:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000826:	9703      	str	r7, [sp, #12]
 8000828:	9f03      	ldr	r7, [sp, #12]
 800082a:	f023 0703 	bic.w	r7, r3, #3
 800082e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000832:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000836:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800083a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800083e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000842:	f04f 0e0f 	mov.w	lr, #15
 8000846:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800084a:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800084c:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000850:	d043      	beq.n	80008da <HAL_GPIO_Init+0x192>
 8000852:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000856:	42b0      	cmp	r0, r6
 8000858:	d041      	beq.n	80008de <HAL_GPIO_Init+0x196>
 800085a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800085e:	42b0      	cmp	r0, r6
 8000860:	d03f      	beq.n	80008e2 <HAL_GPIO_Init+0x19a>
 8000862:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000866:	42b0      	cmp	r0, r6
 8000868:	d03d      	beq.n	80008e6 <HAL_GPIO_Init+0x19e>
 800086a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800086e:	42b0      	cmp	r0, r6
 8000870:	d03b      	beq.n	80008ea <HAL_GPIO_Init+0x1a2>
 8000872:	4548      	cmp	r0, r9
 8000874:	d03b      	beq.n	80008ee <HAL_GPIO_Init+0x1a6>
 8000876:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800087a:	42b0      	cmp	r0, r6
 800087c:	d039      	beq.n	80008f2 <HAL_GPIO_Init+0x1aa>
 800087e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000882:	42b0      	cmp	r0, r6
 8000884:	bf14      	ite	ne
 8000886:	2608      	movne	r6, #8
 8000888:	2607      	moveq	r6, #7
 800088a:	fa06 f60c 	lsl.w	r6, r6, ip
 800088e:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000892:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000894:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000896:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000898:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800089c:	bf0c      	ite	eq
 800089e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80008a0:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80008a2:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80008a4:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008a6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80008aa:	bf0c      	ite	eq
 80008ac:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80008ae:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80008b0:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008b2:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008b4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80008b8:	bf0c      	ite	eq
 80008ba:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80008bc:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80008be:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80008c0:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008c2:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008c4:	bf54      	ite	pl
 80008c6:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80008c8:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80008ca:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008cc:	3301      	adds	r3, #1
 80008ce:	2b10      	cmp	r3, #16
 80008d0:	f47f af45 	bne.w	800075e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008d4:	b005      	add	sp, #20
 80008d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008da:	465e      	mov	r6, fp
 80008dc:	e7d5      	b.n	800088a <HAL_GPIO_Init+0x142>
 80008de:	2601      	movs	r6, #1
 80008e0:	e7d3      	b.n	800088a <HAL_GPIO_Init+0x142>
 80008e2:	2602      	movs	r6, #2
 80008e4:	e7d1      	b.n	800088a <HAL_GPIO_Init+0x142>
 80008e6:	2603      	movs	r6, #3
 80008e8:	e7cf      	b.n	800088a <HAL_GPIO_Init+0x142>
 80008ea:	2604      	movs	r6, #4
 80008ec:	e7cd      	b.n	800088a <HAL_GPIO_Init+0x142>
 80008ee:	2605      	movs	r6, #5
 80008f0:	e7cb      	b.n	800088a <HAL_GPIO_Init+0x142>
 80008f2:	2606      	movs	r6, #6
 80008f4:	e7c9      	b.n	800088a <HAL_GPIO_Init+0x142>
 80008f6:	bf00      	nop
 80008f8:	40013c00 	.word	0x40013c00
 80008fc:	40020000 	.word	0x40020000
 8000900:	40023800 	.word	0x40023800
 8000904:	40021400 	.word	0x40021400

08000908 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000908:	b10a      	cbz	r2, 800090e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800090a:	6181      	str	r1, [r0, #24]
 800090c:	4770      	bx	lr
 800090e:	0409      	lsls	r1, r1, #16
 8000910:	e7fb      	b.n	800090a <HAL_GPIO_WritePin+0x2>
	...

08000914 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000914:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000918:	4604      	mov	r4, r0
 800091a:	b908      	cbnz	r0, 8000920 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 800091c:	2001      	movs	r0, #1
 800091e:	e03f      	b.n	80009a0 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000920:	6803      	ldr	r3, [r0, #0]
 8000922:	07dd      	lsls	r5, r3, #31
 8000924:	d410      	bmi.n	8000948 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000926:	6823      	ldr	r3, [r4, #0]
 8000928:	0798      	lsls	r0, r3, #30
 800092a:	d45a      	bmi.n	80009e2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800092c:	6823      	ldr	r3, [r4, #0]
 800092e:	071a      	lsls	r2, r3, #28
 8000930:	f100 809c 	bmi.w	8000a6c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000934:	6823      	ldr	r3, [r4, #0]
 8000936:	075b      	lsls	r3, r3, #29
 8000938:	f100 80ba 	bmi.w	8000ab0 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800093c:	69a0      	ldr	r0, [r4, #24]
 800093e:	2800      	cmp	r0, #0
 8000940:	f040 811b 	bne.w	8000b7a <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000944:	2000      	movs	r0, #0
 8000946:	e02b      	b.n	80009a0 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000948:	4ba4      	ldr	r3, [pc, #656]	; (8000bdc <HAL_RCC_OscConfig+0x2c8>)
 800094a:	689a      	ldr	r2, [r3, #8]
 800094c:	f002 020c 	and.w	r2, r2, #12
 8000950:	2a04      	cmp	r2, #4
 8000952:	d007      	beq.n	8000964 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000954:	689a      	ldr	r2, [r3, #8]
 8000956:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800095a:	2a08      	cmp	r2, #8
 800095c:	d10a      	bne.n	8000974 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	0259      	lsls	r1, r3, #9
 8000962:	d507      	bpl.n	8000974 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000964:	4b9d      	ldr	r3, [pc, #628]	; (8000bdc <HAL_RCC_OscConfig+0x2c8>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	039a      	lsls	r2, r3, #14
 800096a:	d5dc      	bpl.n	8000926 <HAL_RCC_OscConfig+0x12>
 800096c:	6863      	ldr	r3, [r4, #4]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d1d9      	bne.n	8000926 <HAL_RCC_OscConfig+0x12>
 8000972:	e7d3      	b.n	800091c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000974:	6863      	ldr	r3, [r4, #4]
 8000976:	4d99      	ldr	r5, [pc, #612]	; (8000bdc <HAL_RCC_OscConfig+0x2c8>)
 8000978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800097c:	d113      	bne.n	80009a6 <HAL_RCC_OscConfig+0x92>
 800097e:	682b      	ldr	r3, [r5, #0]
 8000980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000984:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000986:	f7ff fe45 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800098a:	4d94      	ldr	r5, [pc, #592]	; (8000bdc <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800098c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800098e:	682b      	ldr	r3, [r5, #0]
 8000990:	039b      	lsls	r3, r3, #14
 8000992:	d4c8      	bmi.n	8000926 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000994:	f7ff fe3e 	bl	8000614 <HAL_GetTick>
 8000998:	1b80      	subs	r0, r0, r6
 800099a:	2864      	cmp	r0, #100	; 0x64
 800099c:	d9f7      	bls.n	800098e <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 800099e:	2003      	movs	r0, #3
}
 80009a0:	b002      	add	sp, #8
 80009a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009aa:	d104      	bne.n	80009b6 <HAL_RCC_OscConfig+0xa2>
 80009ac:	682b      	ldr	r3, [r5, #0]
 80009ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b2:	602b      	str	r3, [r5, #0]
 80009b4:	e7e3      	b.n	800097e <HAL_RCC_OscConfig+0x6a>
 80009b6:	682a      	ldr	r2, [r5, #0]
 80009b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80009bc:	602a      	str	r2, [r5, #0]
 80009be:	682a      	ldr	r2, [r5, #0]
 80009c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80009c4:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d1dd      	bne.n	8000986 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 80009ca:	f7ff fe23 	bl	8000614 <HAL_GetTick>
 80009ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009d0:	682b      	ldr	r3, [r5, #0]
 80009d2:	039f      	lsls	r7, r3, #14
 80009d4:	d5a7      	bpl.n	8000926 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009d6:	f7ff fe1d 	bl	8000614 <HAL_GetTick>
 80009da:	1b80      	subs	r0, r0, r6
 80009dc:	2864      	cmp	r0, #100	; 0x64
 80009de:	d9f7      	bls.n	80009d0 <HAL_RCC_OscConfig+0xbc>
 80009e0:	e7dd      	b.n	800099e <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009e2:	4b7e      	ldr	r3, [pc, #504]	; (8000bdc <HAL_RCC_OscConfig+0x2c8>)
 80009e4:	689a      	ldr	r2, [r3, #8]
 80009e6:	f012 0f0c 	tst.w	r2, #12
 80009ea:	d007      	beq.n	80009fc <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009ec:	689a      	ldr	r2, [r3, #8]
 80009ee:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009f2:	2a08      	cmp	r2, #8
 80009f4:	d111      	bne.n	8000a1a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	025e      	lsls	r6, r3, #9
 80009fa:	d40e      	bmi.n	8000a1a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009fc:	4b77      	ldr	r3, [pc, #476]	; (8000bdc <HAL_RCC_OscConfig+0x2c8>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	0795      	lsls	r5, r2, #30
 8000a02:	d502      	bpl.n	8000a0a <HAL_RCC_OscConfig+0xf6>
 8000a04:	68e2      	ldr	r2, [r4, #12]
 8000a06:	2a01      	cmp	r2, #1
 8000a08:	d188      	bne.n	800091c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	6921      	ldr	r1, [r4, #16]
 8000a0e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000a12:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000a16:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a18:	e788      	b.n	800092c <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000a1a:	68e2      	ldr	r2, [r4, #12]
 8000a1c:	4b70      	ldr	r3, [pc, #448]	; (8000be0 <HAL_RCC_OscConfig+0x2cc>)
 8000a1e:	b1b2      	cbz	r2, 8000a4e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000a20:	2201      	movs	r2, #1
 8000a22:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a24:	f7ff fdf6 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a28:	4d6c      	ldr	r5, [pc, #432]	; (8000bdc <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000a2a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a2c:	682b      	ldr	r3, [r5, #0]
 8000a2e:	0798      	lsls	r0, r3, #30
 8000a30:	d507      	bpl.n	8000a42 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a32:	682b      	ldr	r3, [r5, #0]
 8000a34:	6922      	ldr	r2, [r4, #16]
 8000a36:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a3a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a3e:	602b      	str	r3, [r5, #0]
 8000a40:	e774      	b.n	800092c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a42:	f7ff fde7 	bl	8000614 <HAL_GetTick>
 8000a46:	1b80      	subs	r0, r0, r6
 8000a48:	2802      	cmp	r0, #2
 8000a4a:	d9ef      	bls.n	8000a2c <HAL_RCC_OscConfig+0x118>
 8000a4c:	e7a7      	b.n	800099e <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000a4e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a50:	f7ff fde0 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a54:	4d61      	ldr	r5, [pc, #388]	; (8000bdc <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000a56:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a58:	682b      	ldr	r3, [r5, #0]
 8000a5a:	0799      	lsls	r1, r3, #30
 8000a5c:	f57f af66 	bpl.w	800092c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a60:	f7ff fdd8 	bl	8000614 <HAL_GetTick>
 8000a64:	1b80      	subs	r0, r0, r6
 8000a66:	2802      	cmp	r0, #2
 8000a68:	d9f6      	bls.n	8000a58 <HAL_RCC_OscConfig+0x144>
 8000a6a:	e798      	b.n	800099e <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a6c:	6962      	ldr	r2, [r4, #20]
 8000a6e:	4b5d      	ldr	r3, [pc, #372]	; (8000be4 <HAL_RCC_OscConfig+0x2d0>)
 8000a70:	b17a      	cbz	r2, 8000a92 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000a72:	2201      	movs	r2, #1
 8000a74:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a76:	f7ff fdcd 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a7a:	4d58      	ldr	r5, [pc, #352]	; (8000bdc <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a7c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a7e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a80:	079f      	lsls	r7, r3, #30
 8000a82:	f53f af57 	bmi.w	8000934 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a86:	f7ff fdc5 	bl	8000614 <HAL_GetTick>
 8000a8a:	1b80      	subs	r0, r0, r6
 8000a8c:	2802      	cmp	r0, #2
 8000a8e:	d9f6      	bls.n	8000a7e <HAL_RCC_OscConfig+0x16a>
 8000a90:	e785      	b.n	800099e <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000a92:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a94:	f7ff fdbe 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a98:	4d50      	ldr	r5, [pc, #320]	; (8000bdc <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a9a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a9c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a9e:	0798      	lsls	r0, r3, #30
 8000aa0:	f57f af48 	bpl.w	8000934 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000aa4:	f7ff fdb6 	bl	8000614 <HAL_GetTick>
 8000aa8:	1b80      	subs	r0, r0, r6
 8000aaa:	2802      	cmp	r0, #2
 8000aac:	d9f6      	bls.n	8000a9c <HAL_RCC_OscConfig+0x188>
 8000aae:	e776      	b.n	800099e <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ab0:	4b4a      	ldr	r3, [pc, #296]	; (8000bdc <HAL_RCC_OscConfig+0x2c8>)
 8000ab2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ab4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000ab8:	d128      	bne.n	8000b0c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	9201      	str	r2, [sp, #4]
 8000abc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000abe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ac2:	641a      	str	r2, [r3, #64]	; 0x40
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	9301      	str	r3, [sp, #4]
 8000acc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000ace:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ad0:	4d45      	ldr	r5, [pc, #276]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
 8000ad2:	682b      	ldr	r3, [r5, #0]
 8000ad4:	05d9      	lsls	r1, r3, #23
 8000ad6:	d51b      	bpl.n	8000b10 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ad8:	68a3      	ldr	r3, [r4, #8]
 8000ada:	4d40      	ldr	r5, [pc, #256]	; (8000bdc <HAL_RCC_OscConfig+0x2c8>)
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d127      	bne.n	8000b30 <HAL_RCC_OscConfig+0x21c>
 8000ae0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000ae8:	f7ff fd94 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aec:	4d3b      	ldr	r5, [pc, #236]	; (8000bdc <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000aee:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000af0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000af4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000af6:	079b      	lsls	r3, r3, #30
 8000af8:	d539      	bpl.n	8000b6e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	f43f af1e 	beq.w	800093c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b00:	4a36      	ldr	r2, [pc, #216]	; (8000bdc <HAL_RCC_OscConfig+0x2c8>)
 8000b02:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	e717      	b.n	800093c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000b0c:	2600      	movs	r6, #0
 8000b0e:	e7df      	b.n	8000ad0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b10:	682b      	ldr	r3, [r5, #0]
 8000b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b16:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000b18:	f7ff fd7c 	bl	8000614 <HAL_GetTick>
 8000b1c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b1e:	682b      	ldr	r3, [r5, #0]
 8000b20:	05da      	lsls	r2, r3, #23
 8000b22:	d4d9      	bmi.n	8000ad8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b24:	f7ff fd76 	bl	8000614 <HAL_GetTick>
 8000b28:	1bc0      	subs	r0, r0, r7
 8000b2a:	2802      	cmp	r0, #2
 8000b2c:	d9f7      	bls.n	8000b1e <HAL_RCC_OscConfig+0x20a>
 8000b2e:	e736      	b.n	800099e <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b30:	2b05      	cmp	r3, #5
 8000b32:	d104      	bne.n	8000b3e <HAL_RCC_OscConfig+0x22a>
 8000b34:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	672b      	str	r3, [r5, #112]	; 0x70
 8000b3c:	e7d0      	b.n	8000ae0 <HAL_RCC_OscConfig+0x1cc>
 8000b3e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b40:	f022 0201 	bic.w	r2, r2, #1
 8000b44:	672a      	str	r2, [r5, #112]	; 0x70
 8000b46:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b48:	f022 0204 	bic.w	r2, r2, #4
 8000b4c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d1ca      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000b52:	f7ff fd5f 	bl	8000614 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b56:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b5a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b5c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b5e:	0798      	lsls	r0, r3, #30
 8000b60:	d5cb      	bpl.n	8000afa <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b62:	f7ff fd57 	bl	8000614 <HAL_GetTick>
 8000b66:	1bc0      	subs	r0, r0, r7
 8000b68:	4540      	cmp	r0, r8
 8000b6a:	d9f7      	bls.n	8000b5c <HAL_RCC_OscConfig+0x248>
 8000b6c:	e717      	b.n	800099e <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b6e:	f7ff fd51 	bl	8000614 <HAL_GetTick>
 8000b72:	1bc0      	subs	r0, r0, r7
 8000b74:	4540      	cmp	r0, r8
 8000b76:	d9bd      	bls.n	8000af4 <HAL_RCC_OscConfig+0x1e0>
 8000b78:	e711      	b.n	800099e <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b7a:	4d18      	ldr	r5, [pc, #96]	; (8000bdc <HAL_RCC_OscConfig+0x2c8>)
 8000b7c:	68ab      	ldr	r3, [r5, #8]
 8000b7e:	f003 030c 	and.w	r3, r3, #12
 8000b82:	2b08      	cmp	r3, #8
 8000b84:	d047      	beq.n	8000c16 <HAL_RCC_OscConfig+0x302>
 8000b86:	4e19      	ldr	r6, [pc, #100]	; (8000bec <HAL_RCC_OscConfig+0x2d8>)
 8000b88:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b8a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000b8c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b8e:	d135      	bne.n	8000bfc <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b90:	f7ff fd40 	bl	8000614 <HAL_GetTick>
 8000b94:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b96:	682b      	ldr	r3, [r5, #0]
 8000b98:	0199      	lsls	r1, r3, #6
 8000b9a:	d429      	bmi.n	8000bf0 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b9c:	6a22      	ldr	r2, [r4, #32]
 8000b9e:	69e3      	ldr	r3, [r4, #28]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ba4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000ba8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000baa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000bae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bb0:	4c0a      	ldr	r4, [pc, #40]	; (8000bdc <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000bb2:	0852      	lsrs	r2, r2, #1
 8000bb4:	3a01      	subs	r2, #1
 8000bb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bba:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000bc0:	f7ff fd28 	bl	8000614 <HAL_GetTick>
 8000bc4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bc6:	6823      	ldr	r3, [r4, #0]
 8000bc8:	019a      	lsls	r2, r3, #6
 8000bca:	f53f aebb 	bmi.w	8000944 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bce:	f7ff fd21 	bl	8000614 <HAL_GetTick>
 8000bd2:	1b40      	subs	r0, r0, r5
 8000bd4:	2802      	cmp	r0, #2
 8000bd6:	d9f6      	bls.n	8000bc6 <HAL_RCC_OscConfig+0x2b2>
 8000bd8:	e6e1      	b.n	800099e <HAL_RCC_OscConfig+0x8a>
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	42470000 	.word	0x42470000
 8000be4:	42470e80 	.word	0x42470e80
 8000be8:	40007000 	.word	0x40007000
 8000bec:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bf0:	f7ff fd10 	bl	8000614 <HAL_GetTick>
 8000bf4:	1bc0      	subs	r0, r0, r7
 8000bf6:	2802      	cmp	r0, #2
 8000bf8:	d9cd      	bls.n	8000b96 <HAL_RCC_OscConfig+0x282>
 8000bfa:	e6d0      	b.n	800099e <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000bfc:	f7ff fd0a 	bl	8000614 <HAL_GetTick>
 8000c00:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c02:	682b      	ldr	r3, [r5, #0]
 8000c04:	019b      	lsls	r3, r3, #6
 8000c06:	f57f ae9d 	bpl.w	8000944 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c0a:	f7ff fd03 	bl	8000614 <HAL_GetTick>
 8000c0e:	1b00      	subs	r0, r0, r4
 8000c10:	2802      	cmp	r0, #2
 8000c12:	d9f6      	bls.n	8000c02 <HAL_RCC_OscConfig+0x2ee>
 8000c14:	e6c3      	b.n	800099e <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c16:	2801      	cmp	r0, #1
 8000c18:	f43f aec2 	beq.w	80009a0 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 8000c1c:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c1e:	69e3      	ldr	r3, [r4, #28]
 8000c20:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000c24:	429a      	cmp	r2, r3
 8000c26:	f47f ae79 	bne.w	800091c <HAL_RCC_OscConfig+0x8>
 8000c2a:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000c2c:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c30:	4293      	cmp	r3, r2
 8000c32:	f47f ae73 	bne.w	800091c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000c36:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000c3c:	4003      	ands	r3, r0
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	f47f ae6c 	bne.w	800091c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000c44:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000c46:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	f47f ae66 	bne.w	800091c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000c50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000c52:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000c56:	1ac0      	subs	r0, r0, r3
 8000c58:	bf18      	it	ne
 8000c5a:	2001      	movne	r0, #1
 8000c5c:	e6a0      	b.n	80009a0 <HAL_RCC_OscConfig+0x8c>
 8000c5e:	bf00      	nop

08000c60 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c60:	4913      	ldr	r1, [pc, #76]	; (8000cb0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000c62:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c64:	688b      	ldr	r3, [r1, #8]
 8000c66:	f003 030c 	and.w	r3, r3, #12
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	d003      	beq.n	8000c76 <HAL_RCC_GetSysClockFreq+0x16>
 8000c6e:	2b08      	cmp	r3, #8
 8000c70:	d003      	beq.n	8000c7a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000c72:	4810      	ldr	r0, [pc, #64]	; (8000cb4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c74:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000c76:	4810      	ldr	r0, [pc, #64]	; (8000cb8 <HAL_RCC_GetSysClockFreq+0x58>)
 8000c78:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c7a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c7c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c7e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c80:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c84:	bf14      	ite	ne
 8000c86:	480c      	ldrne	r0, [pc, #48]	; (8000cb8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c88:	480a      	ldreq	r0, [pc, #40]	; (8000cb4 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c8a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c8e:	bf18      	it	ne
 8000c90:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c92:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c96:	fba1 0100 	umull	r0, r1, r1, r0
 8000c9a:	f7ff fae9 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c9e:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <HAL_RCC_GetSysClockFreq+0x50>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000caa:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cae:	bd08      	pop	{r3, pc}
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	00f42400 	.word	0x00f42400
 8000cb8:	007a1200 	.word	0x007a1200

08000cbc <HAL_RCC_ClockConfig>:
{
 8000cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cc0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	b910      	cbnz	r0, 8000ccc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ccc:	4b44      	ldr	r3, [pc, #272]	; (8000de0 <HAL_RCC_ClockConfig+0x124>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	f002 020f 	and.w	r2, r2, #15
 8000cd4:	428a      	cmp	r2, r1
 8000cd6:	d329      	bcc.n	8000d2c <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cd8:	6821      	ldr	r1, [r4, #0]
 8000cda:	078f      	lsls	r7, r1, #30
 8000cdc:	d42e      	bmi.n	8000d3c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cde:	07c8      	lsls	r0, r1, #31
 8000ce0:	d441      	bmi.n	8000d66 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000ce2:	4b3f      	ldr	r3, [pc, #252]	; (8000de0 <HAL_RCC_ClockConfig+0x124>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	f002 020f 	and.w	r2, r2, #15
 8000cea:	4295      	cmp	r5, r2
 8000cec:	d367      	bcc.n	8000dbe <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cee:	6822      	ldr	r2, [r4, #0]
 8000cf0:	0751      	lsls	r1, r2, #29
 8000cf2:	d46d      	bmi.n	8000dd0 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cf4:	0713      	lsls	r3, r2, #28
 8000cf6:	d507      	bpl.n	8000d08 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000cf8:	4a3a      	ldr	r2, [pc, #232]	; (8000de4 <HAL_RCC_ClockConfig+0x128>)
 8000cfa:	6921      	ldr	r1, [r4, #16]
 8000cfc:	6893      	ldr	r3, [r2, #8]
 8000cfe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000d02:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d06:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d08:	f7ff ffaa 	bl	8000c60 <HAL_RCC_GetSysClockFreq>
 8000d0c:	4b35      	ldr	r3, [pc, #212]	; (8000de4 <HAL_RCC_ClockConfig+0x128>)
 8000d0e:	4a36      	ldr	r2, [pc, #216]	; (8000de8 <HAL_RCC_ClockConfig+0x12c>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000d16:	5cd3      	ldrb	r3, [r2, r3]
 8000d18:	40d8      	lsrs	r0, r3
 8000d1a:	4b34      	ldr	r3, [pc, #208]	; (8000dec <HAL_RCC_ClockConfig+0x130>)
 8000d1c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000d1e:	4b34      	ldr	r3, [pc, #208]	; (8000df0 <HAL_RCC_ClockConfig+0x134>)
 8000d20:	6818      	ldr	r0, [r3, #0]
 8000d22:	f7ff fc2d 	bl	8000580 <HAL_InitTick>
  return HAL_OK;
 8000d26:	2000      	movs	r0, #0
 8000d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d2c:	b2ca      	uxtb	r2, r1
 8000d2e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	4299      	cmp	r1, r3
 8000d38:	d1c5      	bne.n	8000cc6 <HAL_RCC_ClockConfig+0xa>
 8000d3a:	e7cd      	b.n	8000cd8 <HAL_RCC_ClockConfig+0x1c>
 8000d3c:	4b29      	ldr	r3, [pc, #164]	; (8000de4 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d3e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d42:	bf1e      	ittt	ne
 8000d44:	689a      	ldrne	r2, [r3, #8]
 8000d46:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000d4a:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d4c:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d4e:	bf42      	ittt	mi
 8000d50:	689a      	ldrmi	r2, [r3, #8]
 8000d52:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000d56:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d58:	689a      	ldr	r2, [r3, #8]
 8000d5a:	68a0      	ldr	r0, [r4, #8]
 8000d5c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d60:	4302      	orrs	r2, r0
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	e7bb      	b.n	8000cde <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d66:	6862      	ldr	r2, [r4, #4]
 8000d68:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <HAL_RCC_ClockConfig+0x128>)
 8000d6a:	2a01      	cmp	r2, #1
 8000d6c:	d11d      	bne.n	8000daa <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d74:	d0a7      	beq.n	8000cc6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d76:	4e1b      	ldr	r6, [pc, #108]	; (8000de4 <HAL_RCC_ClockConfig+0x128>)
 8000d78:	68b3      	ldr	r3, [r6, #8]
 8000d7a:	f023 0303 	bic.w	r3, r3, #3
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000d82:	f7ff fc47 	bl	8000614 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d86:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d8a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d8c:	68b3      	ldr	r3, [r6, #8]
 8000d8e:	6862      	ldr	r2, [r4, #4]
 8000d90:	f003 030c 	and.w	r3, r3, #12
 8000d94:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d98:	d0a3      	beq.n	8000ce2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d9a:	f7ff fc3b 	bl	8000614 <HAL_GetTick>
 8000d9e:	1bc0      	subs	r0, r0, r7
 8000da0:	4540      	cmp	r0, r8
 8000da2:	d9f3      	bls.n	8000d8c <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000da4:	2003      	movs	r0, #3
}
 8000da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000daa:	1e91      	subs	r1, r2, #2
 8000dac:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dae:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000db0:	d802      	bhi.n	8000db8 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000db2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000db6:	e7dd      	b.n	8000d74 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db8:	f013 0f02 	tst.w	r3, #2
 8000dbc:	e7da      	b.n	8000d74 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dbe:	b2ea      	uxtb	r2, r5
 8000dc0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f003 030f 	and.w	r3, r3, #15
 8000dc8:	429d      	cmp	r5, r3
 8000dca:	f47f af7c 	bne.w	8000cc6 <HAL_RCC_ClockConfig+0xa>
 8000dce:	e78e      	b.n	8000cee <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dd0:	4904      	ldr	r1, [pc, #16]	; (8000de4 <HAL_RCC_ClockConfig+0x128>)
 8000dd2:	68e0      	ldr	r0, [r4, #12]
 8000dd4:	688b      	ldr	r3, [r1, #8]
 8000dd6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000dda:	4303      	orrs	r3, r0
 8000ddc:	608b      	str	r3, [r1, #8]
 8000dde:	e789      	b.n	8000cf4 <HAL_RCC_ClockConfig+0x38>
 8000de0:	40023c00 	.word	0x40023c00
 8000de4:	40023800 	.word	0x40023800
 8000de8:	080029a7 	.word	0x080029a7
 8000dec:	20000008 	.word	0x20000008
 8000df0:	20000004 	.word	0x20000004

08000df4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000dfe:	5cd3      	ldrb	r3, [r2, r3]
 8000e00:	4a03      	ldr	r2, [pc, #12]	; (8000e10 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000e02:	6810      	ldr	r0, [r2, #0]
}
 8000e04:	40d8      	lsrs	r0, r3
 8000e06:	4770      	bx	lr
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	080029b7 	.word	0x080029b7
 8000e10:	20000008 	.word	0x20000008

08000e14 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000e1e:	5cd3      	ldrb	r3, [r2, r3]
 8000e20:	4a03      	ldr	r2, [pc, #12]	; (8000e30 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000e22:	6810      	ldr	r0, [r2, #0]
}
 8000e24:	40d8      	lsrs	r0, r3
 8000e26:	4770      	bx	lr
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	080029b7 	.word	0x080029b7
 8000e30:	20000008 	.word	0x20000008

08000e34 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000e34:	6803      	ldr	r3, [r0, #0]
 8000e36:	68da      	ldr	r2, [r3, #12]
 8000e38:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000e3c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000e3e:	695a      	ldr	r2, [r3, #20]
 8000e40:	f022 0201 	bic.w	r2, r2, #1
 8000e44:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000e46:	2320      	movs	r3, #32
 8000e48:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000e4c:	4770      	bx	lr
	...

08000e50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000e50:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e52:	6803      	ldr	r3, [r0, #0]
 8000e54:	68c1      	ldr	r1, [r0, #12]
 8000e56:	691a      	ldr	r2, [r3, #16]
{
 8000e58:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e5a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e62:	6925      	ldr	r5, [r4, #16]
 8000e64:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8000e66:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e68:	69c0      	ldr	r0, [r0, #28]
 8000e6a:	432a      	orrs	r2, r5
 8000e6c:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8000e6e:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e72:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8000e74:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e78:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000e7e:	695a      	ldr	r2, [r3, #20]
 8000e80:	69a1      	ldr	r1, [r4, #24]
 8000e82:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000e86:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e88:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000e8c:	615a      	str	r2, [r3, #20]
 8000e8e:	4a25      	ldr	r2, [pc, #148]	; (8000f24 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e90:	d129      	bne.n	8000ee6 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d003      	beq.n	8000e9e <UART_SetConfig+0x4e>
 8000e96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d120      	bne.n	8000ee0 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000e9e:	f7ff ffb9 	bl	8000e14 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000ea2:	6862      	ldr	r2, [r4, #4]
 8000ea4:	6825      	ldr	r5, [r4, #0]
 8000ea6:	1892      	adds	r2, r2, r2
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	f04f 0119 	mov.w	r1, #25
 8000eb0:	415b      	adcs	r3, r3
 8000eb2:	fba0 0101 	umull	r0, r1, r0, r1
 8000eb6:	f7ff f9db 	bl	8000270 <__aeabi_uldivmod>
 8000eba:	2164      	movs	r1, #100	; 0x64
 8000ebc:	fbb0 f4f1 	udiv	r4, r0, r1
 8000ec0:	fb01 0314 	mls	r3, r1, r4, r0
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	3332      	adds	r3, #50	; 0x32
 8000ec8:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ecc:	f003 0207 	and.w	r2, r3, #7
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8000ed6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000eda:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000edc:	60ab      	str	r3, [r5, #8]
 8000ede:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8000ee0:	f7ff ff88 	bl	8000df4 <HAL_RCC_GetPCLK1Freq>
 8000ee4:	e7dd      	b.n	8000ea2 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d002      	beq.n	8000ef0 <UART_SetConfig+0xa0>
 8000eea:	4a0f      	ldr	r2, [pc, #60]	; (8000f28 <UART_SetConfig+0xd8>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d116      	bne.n	8000f1e <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 8000ef0:	f7ff ff90 	bl	8000e14 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000ef4:	6863      	ldr	r3, [r4, #4]
 8000ef6:	6825      	ldr	r5, [r4, #0]
 8000ef8:	2119      	movs	r1, #25
 8000efa:	009a      	lsls	r2, r3, #2
 8000efc:	fba0 0101 	umull	r0, r1, r0, r1
 8000f00:	0f9b      	lsrs	r3, r3, #30
 8000f02:	f7ff f9b5 	bl	8000270 <__aeabi_uldivmod>
 8000f06:	2264      	movs	r2, #100	; 0x64
 8000f08:	fbb0 f1f2 	udiv	r1, r0, r2
 8000f0c:	fb02 0311 	mls	r3, r2, r1, r0
 8000f10:	011b      	lsls	r3, r3, #4
 8000f12:	3332      	adds	r3, #50	; 0x32
 8000f14:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f18:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8000f1c:	e7de      	b.n	8000edc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8000f1e:	f7ff ff69 	bl	8000df4 <HAL_RCC_GetPCLK1Freq>
 8000f22:	e7e7      	b.n	8000ef4 <UART_SetConfig+0xa4>
 8000f24:	40011000 	.word	0x40011000
 8000f28:	40011400 	.word	0x40011400

08000f2c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f2e:	4604      	mov	r4, r0
 8000f30:	460e      	mov	r6, r1
 8000f32:	4617      	mov	r7, r2
 8000f34:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000f36:	6821      	ldr	r1, [r4, #0]
 8000f38:	680b      	ldr	r3, [r1, #0]
 8000f3a:	ea36 0303 	bics.w	r3, r6, r3
 8000f3e:	d101      	bne.n	8000f44 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000f40:	2000      	movs	r0, #0
}
 8000f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000f44:	1c6b      	adds	r3, r5, #1
 8000f46:	d0f7      	beq.n	8000f38 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000f48:	b995      	cbnz	r5, 8000f70 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000f4a:	6823      	ldr	r3, [r4, #0]
 8000f4c:	68da      	ldr	r2, [r3, #12]
 8000f4e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000f52:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000f54:	695a      	ldr	r2, [r3, #20]
 8000f56:	f022 0201 	bic.w	r2, r2, #1
 8000f5a:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000f5c:	2320      	movs	r3, #32
 8000f5e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000f62:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000f66:	2300      	movs	r3, #0
 8000f68:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000f70:	f7ff fb50 	bl	8000614 <HAL_GetTick>
 8000f74:	1bc0      	subs	r0, r0, r7
 8000f76:	4285      	cmp	r5, r0
 8000f78:	d2dd      	bcs.n	8000f36 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000f7a:	e7e6      	b.n	8000f4a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000f7c <HAL_UART_Init>:
{
 8000f7c:	b510      	push	{r4, lr}
  if (huart == NULL)
 8000f7e:	4604      	mov	r4, r0
 8000f80:	b340      	cbz	r0, 8000fd4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8000f82:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000f86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f8a:	b91b      	cbnz	r3, 8000f94 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000f8c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000f90:	f000 fc84 	bl	800189c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8000f94:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000f96:	2324      	movs	r3, #36	; 0x24
 8000f98:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000f9c:	68d3      	ldr	r3, [r2, #12]
 8000f9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000fa2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000fa4:	4620      	mov	r0, r4
 8000fa6:	f7ff ff53 	bl	8000e50 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	691a      	ldr	r2, [r3, #16]
 8000fae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000fb2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000fb4:	695a      	ldr	r2, [r3, #20]
 8000fb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000fba:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000fbc:	68da      	ldr	r2, [r3, #12]
 8000fbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000fc2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fc4:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8000fc6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fc8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000fca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000fce:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000fd2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000fd4:	2001      	movs	r0, #1
}
 8000fd6:	bd10      	pop	{r4, pc}

08000fd8 <HAL_UART_Transmit>:
{
 8000fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fdc:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8000fde:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000fe2:	2b20      	cmp	r3, #32
{
 8000fe4:	4604      	mov	r4, r0
 8000fe6:	460d      	mov	r5, r1
 8000fe8:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8000fea:	d151      	bne.n	8001090 <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 8000fec:	2900      	cmp	r1, #0
 8000fee:	d04c      	beq.n	800108a <HAL_UART_Transmit+0xb2>
 8000ff0:	2a00      	cmp	r2, #0
 8000ff2:	d04a      	beq.n	800108a <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8000ff4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d049      	beq.n	8001090 <HAL_UART_Transmit+0xb8>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001002:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001006:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001008:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800100c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001010:	f7ff fb00 	bl	8000614 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001014:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001018:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800101a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 800101e:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8001022:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001024:	b29b      	uxth	r3, r3
 8001026:	b95b      	cbnz	r3, 8001040 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001028:	463b      	mov	r3, r7
 800102a:	4632      	mov	r2, r6
 800102c:	2140      	movs	r1, #64	; 0x40
 800102e:	4620      	mov	r0, r4
 8001030:	f7ff ff7c 	bl	8000f2c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001034:	b9a0      	cbnz	r0, 8001060 <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 8001036:	2320      	movs	r3, #32
 8001038:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 800103c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 8001040:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001042:	3b01      	subs	r3, #1
 8001044:	b29b      	uxth	r3, r3
 8001046:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001048:	68a3      	ldr	r3, [r4, #8]
 800104a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800104e:	4632      	mov	r2, r6
 8001050:	463b      	mov	r3, r7
 8001052:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001056:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001058:	d10e      	bne.n	8001078 <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800105a:	f7ff ff67 	bl	8000f2c <UART_WaitOnFlagUntilTimeout.constprop.3>
 800105e:	b110      	cbz	r0, 8001066 <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 8001060:	2003      	movs	r0, #3
 8001062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001066:	882b      	ldrh	r3, [r5, #0]
 8001068:	6822      	ldr	r2, [r4, #0]
 800106a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800106e:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001070:	6923      	ldr	r3, [r4, #16]
 8001072:	b943      	cbnz	r3, 8001086 <HAL_UART_Transmit+0xae>
          pData += 2U;
 8001074:	3502      	adds	r5, #2
 8001076:	e7d4      	b.n	8001022 <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001078:	f7ff ff58 	bl	8000f2c <UART_WaitOnFlagUntilTimeout.constprop.3>
 800107c:	2800      	cmp	r0, #0
 800107e:	d1ef      	bne.n	8001060 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001080:	6823      	ldr	r3, [r4, #0]
 8001082:	782a      	ldrb	r2, [r5, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	3501      	adds	r5, #1
 8001088:	e7cb      	b.n	8001022 <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 800108a:	2001      	movs	r0, #1
 800108c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8001090:	2002      	movs	r0, #2
}
 8001092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001096 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8001096:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800109a:	2b20      	cmp	r3, #32
 800109c:	d120      	bne.n	80010e0 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 800109e:	b1e9      	cbz	r1, 80010dc <HAL_UART_Receive_IT+0x46>
 80010a0:	b1e2      	cbz	r2, 80010dc <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80010a2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d01a      	beq.n	80010e0 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80010aa:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80010ac:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010ae:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80010b0:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010b2:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80010b4:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80010b8:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80010ba:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80010bc:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 80010be:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80010c2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80010c6:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80010c8:	6951      	ldr	r1, [r2, #20]
 80010ca:	f041 0101 	orr.w	r1, r1, #1
 80010ce:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80010d0:	68d1      	ldr	r1, [r2, #12]
 80010d2:	f041 0120 	orr.w	r1, r1, #32
 80010d6:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 80010d8:	4618      	mov	r0, r3
 80010da:	4770      	bx	lr
      return HAL_ERROR;
 80010dc:	2001      	movs	r0, #1
 80010de:	4770      	bx	lr
    return HAL_BUSY;
 80010e0:	2002      	movs	r0, #2
}
 80010e2:	4770      	bx	lr

080010e4 <HAL_UART_TxCpltCallback>:
 80010e4:	4770      	bx	lr

080010e6 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80010e6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80010ea:	2b22      	cmp	r3, #34	; 0x22
{
 80010ec:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80010ee:	d136      	bne.n	800115e <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80010f0:	6883      	ldr	r3, [r0, #8]
 80010f2:	6901      	ldr	r1, [r0, #16]
 80010f4:	6802      	ldr	r2, [r0, #0]
 80010f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80010fc:	d123      	bne.n	8001146 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80010fe:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001100:	b9e9      	cbnz	r1, 800113e <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001102:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001106:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800110a:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800110c:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800110e:	3c01      	subs	r4, #1
 8001110:	b2a4      	uxth	r4, r4
 8001112:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001114:	b98c      	cbnz	r4, 800113a <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001116:	6803      	ldr	r3, [r0, #0]
 8001118:	68da      	ldr	r2, [r3, #12]
 800111a:	f022 0220 	bic.w	r2, r2, #32
 800111e:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001120:	68da      	ldr	r2, [r3, #12]
 8001122:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001126:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001128:	695a      	ldr	r2, [r3, #20]
 800112a:	f022 0201 	bic.w	r2, r2, #1
 800112e:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001130:	2320      	movs	r3, #32
 8001132:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001136:	f000 f95d 	bl	80013f4 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 800113a:	2000      	movs	r0, #0
}
 800113c:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	f823 2b01 	strh.w	r2, [r3], #1
 8001144:	e7e1      	b.n	800110a <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001146:	b921      	cbnz	r1, 8001152 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001148:	1c59      	adds	r1, r3, #1
 800114a:	6852      	ldr	r2, [r2, #4]
 800114c:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800114e:	701a      	strb	r2, [r3, #0]
 8001150:	e7dc      	b.n	800110c <UART_Receive_IT+0x26>
 8001152:	6852      	ldr	r2, [r2, #4]
 8001154:	1c59      	adds	r1, r3, #1
 8001156:	6281      	str	r1, [r0, #40]	; 0x28
 8001158:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800115c:	e7f7      	b.n	800114e <UART_Receive_IT+0x68>
    return HAL_BUSY;
 800115e:	2002      	movs	r0, #2
 8001160:	bd10      	pop	{r4, pc}

08001162 <HAL_UART_ErrorCallback>:
 8001162:	4770      	bx	lr

08001164 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001164:	6803      	ldr	r3, [r0, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001168:	68d9      	ldr	r1, [r3, #12]
{
 800116a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 800116c:	0716      	lsls	r6, r2, #28
{
 800116e:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001170:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8001172:	d107      	bne.n	8001184 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001174:	0696      	lsls	r6, r2, #26
 8001176:	d55c      	bpl.n	8001232 <HAL_UART_IRQHandler+0xce>
 8001178:	068d      	lsls	r5, r1, #26
 800117a:	d55a      	bpl.n	8001232 <HAL_UART_IRQHandler+0xce>
}
 800117c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001180:	f7ff bfb1 	b.w	80010e6 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001184:	f015 0501 	ands.w	r5, r5, #1
 8001188:	d102      	bne.n	8001190 <HAL_UART_IRQHandler+0x2c>
 800118a:	f411 7f90 	tst.w	r1, #288	; 0x120
 800118e:	d050      	beq.n	8001232 <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001190:	07d0      	lsls	r0, r2, #31
 8001192:	d505      	bpl.n	80011a0 <HAL_UART_IRQHandler+0x3c>
 8001194:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001196:	bf42      	ittt	mi
 8001198:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800119a:	f043 0301 	orrmi.w	r3, r3, #1
 800119e:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80011a0:	0756      	lsls	r6, r2, #29
 80011a2:	d504      	bpl.n	80011ae <HAL_UART_IRQHandler+0x4a>
 80011a4:	b11d      	cbz	r5, 80011ae <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80011a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80011ae:	0790      	lsls	r0, r2, #30
 80011b0:	d504      	bpl.n	80011bc <HAL_UART_IRQHandler+0x58>
 80011b2:	b11d      	cbz	r5, 80011bc <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80011b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80011bc:	0713      	lsls	r3, r2, #28
 80011be:	d506      	bpl.n	80011ce <HAL_UART_IRQHandler+0x6a>
 80011c0:	068e      	lsls	r6, r1, #26
 80011c2:	d400      	bmi.n	80011c6 <HAL_UART_IRQHandler+0x62>
 80011c4:	b11d      	cbz	r5, 80011ce <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80011c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011c8:	f043 0308 	orr.w	r3, r3, #8
 80011cc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80011ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d066      	beq.n	80012a2 <HAL_UART_IRQHandler+0x13e>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80011d4:	0695      	lsls	r5, r2, #26
 80011d6:	d504      	bpl.n	80011e2 <HAL_UART_IRQHandler+0x7e>
 80011d8:	0688      	lsls	r0, r1, #26
 80011da:	d502      	bpl.n	80011e2 <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 80011dc:	4620      	mov	r0, r4
 80011de:	f7ff ff82 	bl	80010e6 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80011e2:	6823      	ldr	r3, [r4, #0]
 80011e4:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80011e6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80011e8:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 80011ea:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80011ec:	d402      	bmi.n	80011f4 <HAL_UART_IRQHandler+0x90>
 80011ee:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80011f2:	d01a      	beq.n	800122a <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 80011f4:	f7ff fe1e 	bl	8000e34 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80011f8:	6823      	ldr	r3, [r4, #0]
 80011fa:	695a      	ldr	r2, [r3, #20]
 80011fc:	0652      	lsls	r2, r2, #25
 80011fe:	d510      	bpl.n	8001222 <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001200:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001202:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001204:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001208:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800120a:	b150      	cbz	r0, 8001222 <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800120c:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <HAL_UART_IRQHandler+0x140>)
 800120e:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001210:	f7ff fa88 	bl	8000724 <HAL_DMA_Abort_IT>
 8001214:	2800      	cmp	r0, #0
 8001216:	d044      	beq.n	80012a2 <HAL_UART_IRQHandler+0x13e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001218:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800121a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800121e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001220:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001222:	4620      	mov	r0, r4
 8001224:	f7ff ff9d 	bl	8001162 <HAL_UART_ErrorCallback>
 8001228:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800122a:	f7ff ff9a 	bl	8001162 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800122e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001230:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001232:	0616      	lsls	r6, r2, #24
 8001234:	d527      	bpl.n	8001286 <HAL_UART_IRQHandler+0x122>
 8001236:	060d      	lsls	r5, r1, #24
 8001238:	d525      	bpl.n	8001286 <HAL_UART_IRQHandler+0x122>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800123a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800123e:	2a21      	cmp	r2, #33	; 0x21
 8001240:	d12f      	bne.n	80012a2 <HAL_UART_IRQHandler+0x13e>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001242:	68a2      	ldr	r2, [r4, #8]
 8001244:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001248:	6a22      	ldr	r2, [r4, #32]
 800124a:	d117      	bne.n	800127c <HAL_UART_IRQHandler+0x118>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800124c:	8811      	ldrh	r1, [r2, #0]
 800124e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001252:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001254:	6921      	ldr	r1, [r4, #16]
 8001256:	b979      	cbnz	r1, 8001278 <HAL_UART_IRQHandler+0x114>
        huart->pTxBuffPtr += 2U;
 8001258:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800125a:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800125c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800125e:	3a01      	subs	r2, #1
 8001260:	b292      	uxth	r2, r2
 8001262:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001264:	b9ea      	cbnz	r2, 80012a2 <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800126c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800126e:	68da      	ldr	r2, [r3, #12]
 8001270:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001278:	3201      	adds	r2, #1
 800127a:	e7ee      	b.n	800125a <HAL_UART_IRQHandler+0xf6>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800127c:	1c51      	adds	r1, r2, #1
 800127e:	6221      	str	r1, [r4, #32]
 8001280:	7812      	ldrb	r2, [r2, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	e7ea      	b.n	800125c <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001286:	0650      	lsls	r0, r2, #25
 8001288:	d50b      	bpl.n	80012a2 <HAL_UART_IRQHandler+0x13e>
 800128a:	064a      	lsls	r2, r1, #25
 800128c:	d509      	bpl.n	80012a2 <HAL_UART_IRQHandler+0x13e>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001294:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001296:	2320      	movs	r3, #32
 8001298:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800129c:	4620      	mov	r0, r4
 800129e:	f7ff ff21 	bl	80010e4 <HAL_UART_TxCpltCallback>
 80012a2:	bd70      	pop	{r4, r5, r6, pc}
 80012a4:	080012a9 	.word	0x080012a9

080012a8 <UART_DMAAbortOnError>:
{
 80012a8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80012b0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80012b2:	f7ff ff56 	bl	8001162 <HAL_UART_ErrorCallback>
 80012b6:	bd08      	pop	{r3, pc}

080012b8 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80012b8:	b508      	push	{r3, lr}
  _rx_buffer = &rx_buffer;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <Ringbuf_init+0x30>)
 80012bc:	480b      	ldr	r0, [pc, #44]	; (80012ec <Ringbuf_init+0x34>)
 80012be:	6018      	str	r0, [r3, #0]
  _tx_buffer = &tx_buffer;
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <Ringbuf_init+0x38>)
 80012c2:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <Ringbuf_init+0x3c>)
 80012c4:	601a      	str	r2, [r3, #0]

  // added by yonwook
  memset(&rx_buffer, 0x00, sizeof(rx_buffer));
 80012c6:	2100      	movs	r1, #0
 80012c8:	f44f 7284 	mov.w	r2, #264	; 0x108
 80012cc:	f000 fbe0 	bl	8001a90 <memset>

#if UART_RING_BUF // yongwook
  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <Ringbuf_init+0x40>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	695a      	ldr	r2, [r3, #20]
 80012d6:	f042 0201 	orr.w	r2, r2, #1
 80012da:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	f042 0220 	orr.w	r2, r2, #32
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	bd08      	pop	{r3, pc}
 80012e6:	bf00      	nop
 80012e8:	200002c0 	.word	0x200002c0
 80012ec:	20000090 	.word	0x20000090
 80012f0:	200002bc 	.word	0x200002bc
 80012f4:	20000198 	.word	0x20000198
 80012f8:	2000033c 	.word	0x2000033c

080012fc <store_char>:
#endif
}

void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80012fc:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001300:	f8d1 2104 	ldr.w	r2, [r1, #260]	; 0x104
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001304:	3301      	adds	r3, #1
 8001306:	b2db      	uxtb	r3, r3
  if(i != buffer->tail) {
 8001308:	429a      	cmp	r2, r3
    buffer->buffer[buffer->head] = c;
 800130a:	bf1e      	ittt	ne
 800130c:	f8d1 2100 	ldrne.w	r2, [r1, #256]	; 0x100
 8001310:	5488      	strbne	r0, [r1, r2]
    buffer->head = i;
 8001312:	f8c1 3100 	strne.w	r3, [r1, #256]	; 0x100
 8001316:	4770      	bx	lr

08001318 <Uart_read>:
}

int Uart_read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <Uart_read+0x2c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8001320:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001324:	4291      	cmp	r1, r2
  {
    return -1;
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001326:	bf1f      	itttt	ne
 8001328:	f8d3 2104 	ldrne.w	r2, [r3, #260]	; 0x104
 800132c:	5c98      	ldrbne	r0, [r3, r2]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 800132e:	f8d3 2104 	ldrne.w	r2, [r3, #260]	; 0x104
 8001332:	3201      	addne	r2, #1
 8001334:	bf1a      	itte	ne
 8001336:	b2d2      	uxtbne	r2, r2
 8001338:	f8c3 2104 	strne.w	r2, [r3, #260]	; 0x104
    return -1;
 800133c:	f04f 30ff 	moveq.w	r0, #4294967295
    return c;
  }
}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	200002c0 	.word	0x200002c0

08001348 <Uart_write>:

void Uart_write(int c)
{
	if (c>=0)
 8001348:	2800      	cmp	r0, #0
 800134a:	db14      	blt.n	8001376 <Uart_write+0x2e>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 800134c:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <Uart_write+0x30>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
 8001354:	3301      	adds	r3, #1
 8001356:	b2db      	uxtb	r3, r3

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 8001358:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
 800135c:	4299      	cmp	r1, r3
 800135e:	d0fb      	beq.n	8001358 <Uart_write+0x10>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8001360:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
 8001364:	5450      	strb	r0, [r2, r1]
		_tx_buffer->head = i;
 8001366:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <Uart_write+0x34>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	68d3      	ldr	r3, [r2, #12]
 8001370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001374:	60d3      	str	r3, [r2, #12]
 8001376:	4770      	bx	lr
 8001378:	200002bc 	.word	0x200002bc
 800137c:	2000033c 	.word	0x2000033c

08001380 <IsDataAvailable>:
	}
}

int IsDataAvailable(void)
{
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <IsDataAvailable+0x14>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 8001388:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800138c:	1ac0      	subs	r0, r0, r3
}
 800138e:	b2c0      	uxtb	r0, r0
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	200002c0 	.word	0x200002c0

08001398 <Uart_isr>:



void Uart_isr (UART_HandleTypeDef *huart)
{
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001398:	6803      	ldr	r3, [r0, #0]
 800139a:	6819      	ldr	r1, [r3, #0]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800139c:	68da      	ldr	r2, [r3, #12]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800139e:	0688      	lsls	r0, r1, #26
 80013a0:	d508      	bpl.n	80013b4 <Uart_isr+0x1c>
 80013a2:	0690      	lsls	r0, r2, #26
 80013a4:	d506      	bpl.n	80013b4 <Uart_isr+0x1c>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80013a6:	681a      	ldr	r2, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80013a8:	6858      	ldr	r0, [r3, #4]
        store_char (c, _rx_buffer);  // store data in buffer
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <Uart_isr+0x54>)
 80013ac:	b2c0      	uxtb	r0, r0
 80013ae:	6819      	ldr	r1, [r3, #0]
 80013b0:	f7ff bfa4 	b.w	80012fc <store_char>
        return;
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80013b4:	0609      	lsls	r1, r1, #24
 80013b6:	d518      	bpl.n	80013ea <Uart_isr+0x52>
 80013b8:	0612      	lsls	r2, r2, #24
 80013ba:	d516      	bpl.n	80013ea <Uart_isr+0x52>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80013bc:	4a0c      	ldr	r2, [pc, #48]	; (80013f0 <Uart_isr+0x58>)
 80013be:	f8d2 0100 	ldr.w	r0, [r2, #256]	; 0x100
 80013c2:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
 80013c6:	4288      	cmp	r0, r1
 80013c8:	d104      	bne.n	80013d4 <Uart_isr+0x3c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80013ca:	68da      	ldr	r2, [r3, #12]
 80013cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	4770      	bx	lr
    	    }

    	 else
    	    {
    	      // There is more data in the output buffer. Send the next byte
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80013d4:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
 80013d8:	5c50      	ldrb	r0, [r2, r1]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80013da:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
 80013de:	3101      	adds	r1, #1
 80013e0:	b2c9      	uxtb	r1, r1
 80013e2:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
    	      *          USART_SR register followed by a write operation to USART_DR register.
    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	      *********************/

    	      huart->Instance->SR;
 80013e6:	681a      	ldr	r2, [r3, #0]
    	      huart->Instance->DR = c;
 80013e8:	6058      	str	r0, [r3, #4]
 80013ea:	4770      	bx	lr
 80013ec:	200002c0 	.word	0x200002c0
 80013f0:	20000198 	.word	0x20000198

080013f4 <HAL_UART_RxCpltCallback>:
#endif
#if 1
	//unsigned char c, b;
	static uint8_t c;

	if (huart->Instance == USART6)
 80013f4:	6802      	ldr	r2, [r0, #0]
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_UART_RxCpltCallback+0x28>)
 80013f8:	429a      	cmp	r2, r3
{
 80013fa:	b510      	push	{r4, lr}
	if (huart->Instance == USART6)
 80013fc:	d10c      	bne.n	8001418 <HAL_UART_RxCpltCallback+0x24>
	{
		HAL_UART_Receive_IT(&huart6, &c, 1);
 80013fe:	4c08      	ldr	r4, [pc, #32]	; (8001420 <HAL_UART_RxCpltCallback+0x2c>)
 8001400:	4808      	ldr	r0, [pc, #32]	; (8001424 <HAL_UART_RxCpltCallback+0x30>)
 8001402:	4621      	mov	r1, r4
 8001404:	2201      	movs	r2, #1
 8001406:	f7ff fe46 	bl	8001096 <HAL_UART_Receive_IT>
		store_char (c, _rx_buffer);  // store data in buffer
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <HAL_UART_RxCpltCallback+0x34>)
 800140c:	7820      	ldrb	r0, [r4, #0]
 800140e:	6819      	ldr	r1, [r3, #0]
	}
#endif
}
 8001410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		store_char (c, _rx_buffer);  // store data in buffer
 8001414:	f7ff bf72 	b.w	80012fc <store_char>
 8001418:	bd10      	pop	{r4, pc}
 800141a:	bf00      	nop
 800141c:	40011400 	.word	0x40011400
 8001420:	2000008c 	.word	0x2000008c
 8001424:	2000037c 	.word	0x2000037c
 8001428:	200002c0 	.word	0x200002c0

0800142c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800142c:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	2214      	movs	r2, #20
{
 8001430:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001432:	eb0d 0002 	add.w	r0, sp, r2
 8001436:	2100      	movs	r1, #0
 8001438:	f000 fb2a 	bl	8001a90 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143c:	2400      	movs	r4, #0
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <MX_GPIO_Init+0x8c>)
 8001440:	9401      	str	r4, [sp, #4]
 8001442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001444:	4d1d      	ldr	r5, [pc, #116]	; (80014bc <MX_GPIO_Init+0x90>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	f042 0204 	orr.w	r2, r2, #4
 800144a:	631a      	str	r2, [r3, #48]	; 0x30
 800144c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800144e:	f002 0204 	and.w	r2, r2, #4
 8001452:	9201      	str	r2, [sp, #4]
 8001454:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001456:	9402      	str	r4, [sp, #8]
 8001458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800145a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800145e:	631a      	str	r2, [r3, #48]	; 0x30
 8001460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001462:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001466:	9202      	str	r2, [sp, #8]
 8001468:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	9403      	str	r4, [sp, #12]
 800146c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800146e:	f042 0201 	orr.w	r2, r2, #1
 8001472:	631a      	str	r2, [r3, #48]	; 0x30
 8001474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001476:	f002 0201 	and.w	r2, r2, #1
 800147a:	9203      	str	r2, [sp, #12]
 800147c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	9404      	str	r4, [sp, #16]
 8001480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001482:	f042 0202 	orr.w	r2, r2, #2
 8001486:	631a      	str	r2, [r3, #48]	; 0x30
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001490:	4622      	mov	r2, r4
 8001492:	4628      	mov	r0, r5
 8001494:	f44f 7100 	mov.w	r1, #512	; 0x200
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001498:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800149a:	f7ff fa35 	bl	8000908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800149e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014a2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a6:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a8:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014aa:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b0:	f7ff f94a 	bl	8000748 <HAL_GPIO_Init>

}
 80014b4:	b00b      	add	sp, #44	; 0x2c
 80014b6:	bd30      	pop	{r4, r5, pc}
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020800 	.word	0x40020800

080014c0 <_write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *p, int len)	// for printf by yongook
{
 80014c0:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&huart1, (uint8_t *)p, len, 10);
 80014c2:	230a      	movs	r3, #10
{
 80014c4:	4614      	mov	r4, r2
	HAL_UART_Transmit(&huart1, (uint8_t *)p, len, 10);
 80014c6:	4803      	ldr	r0, [pc, #12]	; (80014d4 <_write+0x14>)
 80014c8:	b292      	uxth	r2, r2
 80014ca:	f7ff fd85 	bl	8000fd8 <HAL_UART_Transmit>

	return len;
}
 80014ce:	4620      	mov	r0, r4
 80014d0:	bd10      	pop	{r4, pc}
 80014d2:	bf00      	nop
 80014d4:	2000033c 	.word	0x2000033c

080014d8 <read_uart_dr>:

void read_uart_dr(UART_HandleTypeDef *huart)
{
	unsigned char c = huart->Instance->DR;
 80014d8:	6803      	ldr	r3, [r0, #0]

	printf("%c received\n", c);
 80014da:	4802      	ldr	r0, [pc, #8]	; (80014e4 <read_uart_dr+0xc>)
	unsigned char c = huart->Instance->DR;
 80014dc:	6859      	ldr	r1, [r3, #4]
	printf("%c received\n", c);
 80014de:	b2c9      	uxtb	r1, r1
 80014e0:	f000 bade 	b.w	8001aa0 <iprintf>
 80014e4:	0800299a 	.word	0x0800299a

080014e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e8:	b530      	push	{r4, r5, lr}
 80014ea:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ec:	2230      	movs	r2, #48	; 0x30
 80014ee:	2100      	movs	r1, #0
 80014f0:	a808      	add	r0, sp, #32
 80014f2:	f000 facd 	bl	8001a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f6:	2100      	movs	r1, #0
 80014f8:	2214      	movs	r2, #20
 80014fa:	a803      	add	r0, sp, #12
 80014fc:	f000 fac8 	bl	8001a90 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001500:	2400      	movs	r4, #0
 8001502:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <SystemClock_Config+0x8c>)
 8001504:	9401      	str	r4, [sp, #4]
 8001506:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001508:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800150c:	641a      	str	r2, [r3, #64]	; 0x40
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001518:	4b17      	ldr	r3, [pc, #92]	; (8001578 <SystemClock_Config+0x90>)
 800151a:	9402      	str	r4, [sp, #8]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001526:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800152c:	9302      	str	r3, [sp, #8]
 800152e:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001530:	2301      	movs	r3, #1
 8001532:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001534:	2310      	movs	r3, #16
 8001536:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001538:	2308      	movs	r3, #8
 800153a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800153c:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800153e:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001540:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001542:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001544:	2304      	movs	r3, #4
 8001546:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001548:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800154a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800154c:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154e:	f7ff f9e1 	bl	8000914 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001552:	230f      	movs	r3, #15
 8001554:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001556:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800155a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800155c:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800155e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001562:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001564:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001566:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001568:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800156a:	f7ff fba7 	bl	8000cbc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800156e:	b015      	add	sp, #84	; 0x54
 8001570:	bd30      	pop	{r4, r5, pc}
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800
 8001578:	40007000 	.word	0x40007000

0800157c <main>:
{
 800157c:	b538      	push	{r3, r4, r5, lr}
  HAL_Init();
 800157e:	f7ff f823 	bl	80005c8 <HAL_Init>
  SystemClock_Config();
 8001582:	f7ff ffb1 	bl	80014e8 <SystemClock_Config>
  MX_GPIO_Init();
 8001586:	f7ff ff51 	bl	800142c <MX_GPIO_Init>
  MX_USART6_UART_Init();
 800158a:	f000 f96b 	bl	8001864 <MX_USART6_UART_Init>
  MX_USART1_UART_Init();
 800158e:	f000 f915 	bl	80017bc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001592:	f000 f92f 	bl	80017f4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001596:	f000 f949 	bl	800182c <MX_USART3_UART_Init>
  * @retval None
  */
static void MX_NVIC_Init(void)
{
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	4611      	mov	r1, r2
 800159e:	2025      	movs	r0, #37	; 0x25
 80015a0:	f7ff f864 	bl	800066c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015a4:	2025      	movs	r0, #37	; 0x25
 80015a6:	f7ff f895 	bl	80006d4 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	4611      	mov	r1, r2
 80015ae:	2026      	movs	r0, #38	; 0x26
 80015b0:	f7ff f85c 	bl	800066c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015b4:	2026      	movs	r0, #38	; 0x26
 80015b6:	f7ff f88d 	bl	80006d4 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	4611      	mov	r1, r2
 80015be:	2027      	movs	r0, #39	; 0x27
 80015c0:	f7ff f854 	bl	800066c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015c4:	2027      	movs	r0, #39	; 0x27
 80015c6:	f7ff f885 	bl	80006d4 <HAL_NVIC_EnableIRQ>
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	4611      	mov	r1, r2
 80015ce:	2047      	movs	r0, #71	; 0x47
 80015d0:	f7ff f84c 	bl	800066c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 80015d4:	2047      	movs	r0, #71	; 0x47
 80015d6:	f7ff f87d 	bl	80006d4 <HAL_NVIC_EnableIRQ>
  Ringbuf_init();	// yongwook
 80015da:	f7ff fe6d 	bl	80012b8 <Ringbuf_init>
  printf("smartoutlet main program start...\n");
 80015de:	481a      	ldr	r0, [pc, #104]	; (8001648 <main+0xcc>)
 80015e0:	f000 fad2 	bl	8001b88 <puts>
  SysTick_Config(SystemCoreClock / 1000);
 80015e4:	4b19      	ldr	r3, [pc, #100]	; (800164c <main+0xd0>)
 80015e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	fbb3 f3f2 	udiv	r3, r3, r2
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f0:	3b01      	subs	r3, #1
 80015f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f6:	d209      	bcs.n	800160c <main+0x90>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f8:	4a15      	ldr	r2, [pc, #84]	; (8001650 <main+0xd4>)
 80015fa:	6053      	str	r3, [r2, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <main+0xd8>)
 80015fe:	21f0      	movs	r1, #240	; 0xf0
 8001600:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001604:	2300      	movs	r3, #0
 8001606:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001608:	2307      	movs	r3, #7
 800160a:	6013      	str	r3, [r2, #0]
  	  printf("%d sec\n", i+1);
 800160c:	4d12      	ldr	r5, [pc, #72]	; (8001658 <main+0xdc>)
{
 800160e:	2400      	movs	r4, #0
	  HAL_Delay(1000);
 8001610:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  	  printf("%d sec\n", i+1);
 8001614:	3401      	adds	r4, #1
	  HAL_Delay(1000);
 8001616:	f7ff f803 	bl	8000620 <HAL_Delay>
  	  printf("%d sec\n", i+1);
 800161a:	4621      	mov	r1, r4
 800161c:	4628      	mov	r0, r5
 800161e:	f000 fa3f 	bl	8001aa0 <iprintf>
  for (int i = 0; i < 10; i++)
 8001622:	2c0a      	cmp	r4, #10
 8001624:	d1f4      	bne.n	8001610 <main+0x94>
	  read_uart_dr(&huart1);
 8001626:	4c0d      	ldr	r4, [pc, #52]	; (800165c <main+0xe0>)
	  if (IsDataAvailable())
 8001628:	f7ff feaa 	bl	8001380 <IsDataAvailable>
 800162c:	b118      	cbz	r0, 8001636 <main+0xba>
	  	int data = Uart_read();
 800162e:	f7ff fe73 	bl	8001318 <Uart_read>
	  	Uart_write(data);
 8001632:	f7ff fe89 	bl	8001348 <Uart_write>
	  HAL_Delay(5000);
 8001636:	f241 3088 	movw	r0, #5000	; 0x1388
 800163a:	f7fe fff1 	bl	8000620 <HAL_Delay>
	  read_uart_dr(&huart1);
 800163e:	4620      	mov	r0, r4
 8001640:	f7ff ff4a 	bl	80014d8 <read_uart_dr>
	  if (IsDataAvailable())
 8001644:	e7f0      	b.n	8001628 <main+0xac>
 8001646:	bf00      	nop
 8001648:	08002970 	.word	0x08002970
 800164c:	20000008 	.word	0x20000008
 8001650:	e000e010 	.word	0xe000e010
 8001654:	e000ed00 	.word	0xe000ed00
 8001658:	08002992 	.word	0x08002992
 800165c:	2000033c 	.word	0x2000033c

08001660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001660:	4770      	bx	lr
	...

08001664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001664:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <HAL_MspInit+0x34>)
 8001668:	2100      	movs	r1, #0
 800166a:	9100      	str	r1, [sp, #0]
 800166c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800166e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001672:	645a      	str	r2, [r3, #68]	; 0x44
 8001674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001676:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800167a:	9200      	str	r2, [sp, #0]
 800167c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	9101      	str	r1, [sp, #4]
 8001680:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001682:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001686:	641a      	str	r2, [r3, #64]	; 0x40
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001692:	b002      	add	sp, #8
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800

0800169c <NMI_Handler>:
 800169c:	4770      	bx	lr

0800169e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169e:	e7fe      	b.n	800169e <HardFault_Handler>

080016a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a0:	e7fe      	b.n	80016a0 <MemManage_Handler>

080016a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a2:	e7fe      	b.n	80016a2 <BusFault_Handler>

080016a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a4:	e7fe      	b.n	80016a4 <UsageFault_Handler>

080016a6 <SVC_Handler>:
 80016a6:	4770      	bx	lr

080016a8 <DebugMon_Handler>:
 80016a8:	4770      	bx	lr

080016aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016aa:	4770      	bx	lr

080016ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ae:	f7fe ffa5 	bl	80005fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();	// yongwook
  /* USER CODE END SysTick_IRQn 1 */
}
 80016b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();	// yongwook
 80016b6:	f7ff b831 	b.w	800071c <HAL_SYSTICK_IRQHandler>
	...

080016bc <USART1_IRQHandler>:
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */
	_isr_cnt++;	// yongwook
 80016bc:	4a03      	ldr	r2, [pc, #12]	; (80016cc <USART1_IRQHandler+0x10>)
	Uart_isr(&huart1);	// yongwook
 80016be:	4804      	ldr	r0, [pc, #16]	; (80016d0 <USART1_IRQHandler+0x14>)
	_isr_cnt++;	// yongwook
 80016c0:	6813      	ldr	r3, [r2, #0]
 80016c2:	3301      	adds	r3, #1
 80016c4:	6013      	str	r3, [r2, #0]
	Uart_isr(&huart1);	// yongwook
 80016c6:	f7ff be67 	b.w	8001398 <Uart_isr>
 80016ca:	bf00      	nop
 80016cc:	200002a0 	.word	0x200002a0
 80016d0:	2000033c 	.word	0x2000033c

080016d4 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016d4:	4801      	ldr	r0, [pc, #4]	; (80016dc <USART2_IRQHandler+0x8>)
 80016d6:	f7ff bd45 	b.w	8001164 <HAL_UART_IRQHandler>
 80016da:	bf00      	nop
 80016dc:	200003bc 	.word	0x200003bc

080016e0 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016e0:	4801      	ldr	r0, [pc, #4]	; (80016e8 <USART3_IRQHandler+0x8>)
 80016e2:	f7ff bd3f 	b.w	8001164 <HAL_UART_IRQHandler>
 80016e6:	bf00      	nop
 80016e8:	200002fc 	.word	0x200002fc

080016ec <USART6_IRQHandler>:
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */
	Uart_isr(&huart6);	// yongwook
 80016ec:	4801      	ldr	r0, [pc, #4]	; (80016f4 <USART6_IRQHandler+0x8>)
 80016ee:	f7ff be53 	b.w	8001398 <Uart_isr>
 80016f2:	bf00      	nop
 80016f4:	2000037c 	.word	0x2000037c

080016f8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016f8:	b570      	push	{r4, r5, r6, lr}
 80016fa:	460e      	mov	r6, r1
 80016fc:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fe:	460c      	mov	r4, r1
 8001700:	1ba3      	subs	r3, r4, r6
 8001702:	429d      	cmp	r5, r3
 8001704:	dc01      	bgt.n	800170a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001706:	4628      	mov	r0, r5
 8001708:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800170a:	f3af 8000 	nop.w
 800170e:	f804 0b01 	strb.w	r0, [r4], #1
 8001712:	e7f5      	b.n	8001700 <_read+0x8>

08001714 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001714:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001716:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <_sbrk+0x2c>)
 8001718:	6819      	ldr	r1, [r3, #0]
{
 800171a:	4602      	mov	r2, r0
	if (heap_end == 0)
 800171c:	b909      	cbnz	r1, 8001722 <_sbrk+0xe>
		heap_end = &end;
 800171e:	4909      	ldr	r1, [pc, #36]	; (8001744 <_sbrk+0x30>)
 8001720:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8001722:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001724:	4669      	mov	r1, sp
 8001726:	4402      	add	r2, r0
 8001728:	428a      	cmp	r2, r1
 800172a:	d906      	bls.n	800173a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800172c:	f000 f986 	bl	8001a3c <__errno>
 8001730:	230c      	movs	r3, #12
 8001732:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800173a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800173c:	bd08      	pop	{r3, pc}
 800173e:	bf00      	nop
 8001740:	200002a4 	.word	0x200002a4
 8001744:	20000400 	.word	0x20000400

08001748 <_close>:

int _close(int file)
{
	return -1;
}
 8001748:	f04f 30ff 	mov.w	r0, #4294967295
 800174c:	4770      	bx	lr

0800174e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800174e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001752:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001754:	2000      	movs	r0, #0
 8001756:	4770      	bx	lr

08001758 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001758:	2001      	movs	r0, #1
 800175a:	4770      	bx	lr

0800175c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800175c:	2000      	movs	r0, #0
 800175e:	4770      	bx	lr

08001760 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <SystemInit+0x18>)
 8001762:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001766:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800176a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800176e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <HAL_SYSTICK_Callback>:
int f_msetTimer, f_mtimer;
uint32_t expires;

void HAL_SYSTICK_Callback(void)			// yongwook
{
	g_sSysTickCnt++;
 800177c:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <HAL_SYSTICK_Callback+0x2c>)
 800177e:	6813      	ldr	r3, [r2, #0]
 8001780:	3301      	adds	r3, #1
 8001782:	6013      	str	r3, [r2, #0]
	jiffies++;
 8001784:	4a09      	ldr	r2, [pc, #36]	; (80017ac <HAL_SYSTICK_Callback+0x30>)
 8001786:	6813      	ldr	r3, [r2, #0]
 8001788:	3301      	adds	r3, #1
 800178a:	6013      	str	r3, [r2, #0]

	if (f_msetTimer == 1)
 800178c:	4a08      	ldr	r2, [pc, #32]	; (80017b0 <HAL_SYSTICK_Callback+0x34>)
 800178e:	6811      	ldr	r1, [r2, #0]
 8001790:	2901      	cmp	r1, #1
 8001792:	d107      	bne.n	80017a4 <HAL_SYSTICK_Callback+0x28>
	{
		if (jiffies == expires)
 8001794:	4807      	ldr	r0, [pc, #28]	; (80017b4 <HAL_SYSTICK_Callback+0x38>)
 8001796:	6800      	ldr	r0, [r0, #0]
 8001798:	4283      	cmp	r3, r0
		{
			f_mtimer = 1;
 800179a:	bf01      	itttt	eq
 800179c:	4b06      	ldreq	r3, [pc, #24]	; (80017b8 <HAL_SYSTICK_Callback+0x3c>)
 800179e:	6019      	streq	r1, [r3, #0]
			f_msetTimer = 0;
 80017a0:	2300      	moveq	r3, #0
 80017a2:	6013      	streq	r3, [r2, #0]
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	200002a8 	.word	0x200002a8
 80017ac:	200002ac 	.word	0x200002ac
 80017b0:	200002cc 	.word	0x200002cc
 80017b4:	200002c8 	.word	0x200002c8
 80017b8:	200002c4 	.word	0x200002c4

080017bc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017bc:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 80017be:	480b      	ldr	r0, [pc, #44]	; (80017ec <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <MX_USART1_UART_Init+0x34>)
 80017c2:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80017c6:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017ca:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017cc:	2300      	movs	r3, #0
 80017ce:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017d0:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017d2:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017d4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017d6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017da:	f7ff fbcf 	bl	8000f7c <HAL_UART_Init>
 80017de:	b118      	cbz	r0, 80017e8 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80017e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80017e4:	f7ff bf3c 	b.w	8001660 <Error_Handler>
 80017e8:	bd08      	pop	{r3, pc}
 80017ea:	bf00      	nop
 80017ec:	2000033c 	.word	0x2000033c
 80017f0:	40011000 	.word	0x40011000

080017f4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017f4:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 80017f6:	480b      	ldr	r0, [pc, #44]	; (8001824 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <MX_USART2_UART_Init+0x34>)
 80017fa:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80017fe:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001802:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001804:	2300      	movs	r3, #0
 8001806:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001808:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800180a:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800180c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001810:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001812:	f7ff fbb3 	bl	8000f7c <HAL_UART_Init>
 8001816:	b118      	cbz	r0, 8001820 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001818:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800181c:	f7ff bf20 	b.w	8001660 <Error_Handler>
 8001820:	bd08      	pop	{r3, pc}
 8001822:	bf00      	nop
 8001824:	200003bc 	.word	0x200003bc
 8001828:	40004400 	.word	0x40004400

0800182c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800182c:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 800182e:	480b      	ldr	r0, [pc, #44]	; (800185c <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <MX_USART3_UART_Init+0x34>)
 8001832:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8001836:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 800183a:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800183c:	2300      	movs	r3, #0
 800183e:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001840:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001842:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001844:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001846:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001848:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800184a:	f7ff fb97 	bl	8000f7c <HAL_UART_Init>
 800184e:	b118      	cbz	r0, 8001858 <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001850:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001854:	f7ff bf04 	b.w	8001660 <Error_Handler>
 8001858:	bd08      	pop	{r3, pc}
 800185a:	bf00      	nop
 800185c:	200002fc 	.word	0x200002fc
 8001860:	40004800 	.word	0x40004800

08001864 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001864:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 8001866:	480b      	ldr	r0, [pc, #44]	; (8001894 <MX_USART6_UART_Init+0x30>)
  huart6.Init.BaudRate = 115200;
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <MX_USART6_UART_Init+0x34>)
 800186a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800186e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001872:	220c      	movs	r2, #12
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001874:	2300      	movs	r3, #0
 8001876:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001878:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800187a:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800187c:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187e:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001880:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001882:	f7ff fb7b 	bl	8000f7c <HAL_UART_Init>
 8001886:	b118      	cbz	r0, 8001890 <MX_USART6_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001888:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800188c:	f7ff bee8 	b.w	8001660 <Error_Handler>
 8001890:	bd08      	pop	{r3, pc}
 8001892:	bf00      	nop
 8001894:	2000037c 	.word	0x2000037c
 8001898:	40011400 	.word	0x40011400

0800189c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800189c:	b510      	push	{r4, lr}
 800189e:	4604      	mov	r4, r0
 80018a0:	b08e      	sub	sp, #56	; 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a2:	2214      	movs	r2, #20
 80018a4:	2100      	movs	r1, #0
 80018a6:	a809      	add	r0, sp, #36	; 0x24
 80018a8:	f000 f8f2 	bl	8001a90 <memset>
  if(uartHandle->Instance==USART1)
 80018ac:	6823      	ldr	r3, [r4, #0]
 80018ae:	4a46      	ldr	r2, [pc, #280]	; (80019c8 <HAL_UART_MspInit+0x12c>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d124      	bne.n	80018fe <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018b4:	4b45      	ldr	r3, [pc, #276]	; (80019cc <HAL_UART_MspInit+0x130>)
 80018b6:	2100      	movs	r1, #0
 80018b8:	9101      	str	r1, [sp, #4]
 80018ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018bc:	f042 0210 	orr.w	r2, r2, #16
 80018c0:	645a      	str	r2, [r3, #68]	; 0x44
 80018c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018c4:	f002 0210 	and.w	r2, r2, #16
 80018c8:	9201      	str	r2, [sp, #4]
 80018ca:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018cc:	9102      	str	r1, [sp, #8]
 80018ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018d0:	f042 0201 	orr.w	r2, r2, #1
 80018d4:	631a      	str	r2, [r3, #48]	; 0x30
 80018d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	9302      	str	r3, [sp, #8]
 80018de:	9b02      	ldr	r3, [sp, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018e0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018e4:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ea:	2303      	movs	r3, #3
 80018ec:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ee:	4838      	ldr	r0, [pc, #224]	; (80019d0 <HAL_UART_MspInit+0x134>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018f0:	2307      	movs	r3, #7
 80018f2:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f4:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f6:	f7fe ff27 	bl	8000748 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80018fa:	b00e      	add	sp, #56	; 0x38
 80018fc:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==USART2)
 80018fe:	4a35      	ldr	r2, [pc, #212]	; (80019d4 <HAL_UART_MspInit+0x138>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d117      	bne.n	8001934 <HAL_UART_MspInit+0x98>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001904:	4b31      	ldr	r3, [pc, #196]	; (80019cc <HAL_UART_MspInit+0x130>)
 8001906:	2100      	movs	r1, #0
 8001908:	9103      	str	r1, [sp, #12]
 800190a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800190c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001910:	641a      	str	r2, [r3, #64]	; 0x40
 8001912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001914:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001918:	9203      	str	r2, [sp, #12]
 800191a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191c:	9104      	str	r1, [sp, #16]
 800191e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001920:	f042 0201 	orr.w	r2, r2, #1
 8001924:	631a      	str	r2, [r3, #48]	; 0x30
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	9304      	str	r3, [sp, #16]
 800192e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001930:	230c      	movs	r3, #12
 8001932:	e7d7      	b.n	80018e4 <HAL_UART_MspInit+0x48>
  else if(uartHandle->Instance==USART3)
 8001934:	4a28      	ldr	r2, [pc, #160]	; (80019d8 <HAL_UART_MspInit+0x13c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d121      	bne.n	800197e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800193a:	4b24      	ldr	r3, [pc, #144]	; (80019cc <HAL_UART_MspInit+0x130>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193c:	4827      	ldr	r0, [pc, #156]	; (80019dc <HAL_UART_MspInit+0x140>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800193e:	2100      	movs	r1, #0
 8001940:	9105      	str	r1, [sp, #20]
 8001942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001944:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001948:	641a      	str	r2, [r3, #64]	; 0x40
 800194a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800194c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001950:	9205      	str	r2, [sp, #20]
 8001952:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001954:	9106      	str	r1, [sp, #24]
 8001956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001958:	f042 0202 	orr.w	r2, r2, #2
 800195c:	631a      	str	r2, [r3, #48]	; 0x30
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	9306      	str	r3, [sp, #24]
 8001966:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001968:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800196c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001972:	2303      	movs	r3, #3
 8001974:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001976:	2307      	movs	r3, #7
 8001978:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197a:	a909      	add	r1, sp, #36	; 0x24
 800197c:	e7bb      	b.n	80018f6 <HAL_UART_MspInit+0x5a>
  else if(uartHandle->Instance==USART6)
 800197e:	4a18      	ldr	r2, [pc, #96]	; (80019e0 <HAL_UART_MspInit+0x144>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d1ba      	bne.n	80018fa <HAL_UART_MspInit+0x5e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <HAL_UART_MspInit+0x130>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001986:	4817      	ldr	r0, [pc, #92]	; (80019e4 <HAL_UART_MspInit+0x148>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8001988:	2100      	movs	r1, #0
 800198a:	9107      	str	r1, [sp, #28]
 800198c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800198e:	f042 0220 	orr.w	r2, r2, #32
 8001992:	645a      	str	r2, [r3, #68]	; 0x44
 8001994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001996:	f002 0220 	and.w	r2, r2, #32
 800199a:	9207      	str	r2, [sp, #28]
 800199c:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800199e:	9108      	str	r1, [sp, #32]
 80019a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019a2:	f042 0204 	orr.w	r2, r2, #4
 80019a6:	631a      	str	r2, [r3, #48]	; 0x30
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	9308      	str	r3, [sp, #32]
 80019b0:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019b2:	23c0      	movs	r3, #192	; 0xc0
 80019b4:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ba:	2303      	movs	r3, #3
 80019bc:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80019be:	2308      	movs	r3, #8
 80019c0:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c2:	a909      	add	r1, sp, #36	; 0x24
 80019c4:	e797      	b.n	80018f6 <HAL_UART_MspInit+0x5a>
 80019c6:	bf00      	nop
 80019c8:	40011000 	.word	0x40011000
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40020000 	.word	0x40020000
 80019d4:	40004400 	.word	0x40004400
 80019d8:	40004800 	.word	0x40004800
 80019dc:	40020400 	.word	0x40020400
 80019e0:	40011400 	.word	0x40011400
 80019e4:	40020800 	.word	0x40020800

080019e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019ee:	e003      	b.n	80019f8 <LoopCopyDataInit>

080019f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019f6:	3104      	adds	r1, #4

080019f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019f8:	480b      	ldr	r0, [pc, #44]	; (8001a28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019fa:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a00:	d3f6      	bcc.n	80019f0 <CopyDataInit>
  ldr  r2, =_sbss
 8001a02:	4a0b      	ldr	r2, [pc, #44]	; (8001a30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a04:	e002      	b.n	8001a0c <LoopFillZerobss>

08001a06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a08:	f842 3b04 	str.w	r3, [r2], #4

08001a0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a0c:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a10:	d3f9      	bcc.n	8001a06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a12:	f7ff fea5 	bl	8001760 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a16:	f000 f817 	bl	8001a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a1a:	f7ff fdaf 	bl	800157c <main>
  bx  lr    
 8001a1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a20:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a24:	08002a68 	.word	0x08002a68
  ldr  r0, =_sdata
 8001a28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a2c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001a30:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001a34:	20000400 	.word	0x20000400

08001a38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a38:	e7fe      	b.n	8001a38 <ADC_IRQHandler>
	...

08001a3c <__errno>:
 8001a3c:	4b01      	ldr	r3, [pc, #4]	; (8001a44 <__errno+0x8>)
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	2000000c 	.word	0x2000000c

08001a48 <__libc_init_array>:
 8001a48:	b570      	push	{r4, r5, r6, lr}
 8001a4a:	4e0d      	ldr	r6, [pc, #52]	; (8001a80 <__libc_init_array+0x38>)
 8001a4c:	4c0d      	ldr	r4, [pc, #52]	; (8001a84 <__libc_init_array+0x3c>)
 8001a4e:	1ba4      	subs	r4, r4, r6
 8001a50:	10a4      	asrs	r4, r4, #2
 8001a52:	2500      	movs	r5, #0
 8001a54:	42a5      	cmp	r5, r4
 8001a56:	d109      	bne.n	8001a6c <__libc_init_array+0x24>
 8001a58:	4e0b      	ldr	r6, [pc, #44]	; (8001a88 <__libc_init_array+0x40>)
 8001a5a:	4c0c      	ldr	r4, [pc, #48]	; (8001a8c <__libc_init_array+0x44>)
 8001a5c:	f000 ff7c 	bl	8002958 <_init>
 8001a60:	1ba4      	subs	r4, r4, r6
 8001a62:	10a4      	asrs	r4, r4, #2
 8001a64:	2500      	movs	r5, #0
 8001a66:	42a5      	cmp	r5, r4
 8001a68:	d105      	bne.n	8001a76 <__libc_init_array+0x2e>
 8001a6a:	bd70      	pop	{r4, r5, r6, pc}
 8001a6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a70:	4798      	blx	r3
 8001a72:	3501      	adds	r5, #1
 8001a74:	e7ee      	b.n	8001a54 <__libc_init_array+0xc>
 8001a76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a7a:	4798      	blx	r3
 8001a7c:	3501      	adds	r5, #1
 8001a7e:	e7f2      	b.n	8001a66 <__libc_init_array+0x1e>
 8001a80:	08002a60 	.word	0x08002a60
 8001a84:	08002a60 	.word	0x08002a60
 8001a88:	08002a60 	.word	0x08002a60
 8001a8c:	08002a64 	.word	0x08002a64

08001a90 <memset>:
 8001a90:	4402      	add	r2, r0
 8001a92:	4603      	mov	r3, r0
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d100      	bne.n	8001a9a <memset+0xa>
 8001a98:	4770      	bx	lr
 8001a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8001a9e:	e7f9      	b.n	8001a94 <memset+0x4>

08001aa0 <iprintf>:
 8001aa0:	b40f      	push	{r0, r1, r2, r3}
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <iprintf+0x2c>)
 8001aa4:	b513      	push	{r0, r1, r4, lr}
 8001aa6:	681c      	ldr	r4, [r3, #0]
 8001aa8:	b124      	cbz	r4, 8001ab4 <iprintf+0x14>
 8001aaa:	69a3      	ldr	r3, [r4, #24]
 8001aac:	b913      	cbnz	r3, 8001ab4 <iprintf+0x14>
 8001aae:	4620      	mov	r0, r4
 8001ab0:	f000 fa24 	bl	8001efc <__sinit>
 8001ab4:	ab05      	add	r3, sp, #20
 8001ab6:	9a04      	ldr	r2, [sp, #16]
 8001ab8:	68a1      	ldr	r1, [r4, #8]
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	4620      	mov	r0, r4
 8001abe:	f000 fbe1 	bl	8002284 <_vfiprintf_r>
 8001ac2:	b002      	add	sp, #8
 8001ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ac8:	b004      	add	sp, #16
 8001aca:	4770      	bx	lr
 8001acc:	2000000c 	.word	0x2000000c

08001ad0 <_puts_r>:
 8001ad0:	b570      	push	{r4, r5, r6, lr}
 8001ad2:	460e      	mov	r6, r1
 8001ad4:	4605      	mov	r5, r0
 8001ad6:	b118      	cbz	r0, 8001ae0 <_puts_r+0x10>
 8001ad8:	6983      	ldr	r3, [r0, #24]
 8001ada:	b90b      	cbnz	r3, 8001ae0 <_puts_r+0x10>
 8001adc:	f000 fa0e 	bl	8001efc <__sinit>
 8001ae0:	69ab      	ldr	r3, [r5, #24]
 8001ae2:	68ac      	ldr	r4, [r5, #8]
 8001ae4:	b913      	cbnz	r3, 8001aec <_puts_r+0x1c>
 8001ae6:	4628      	mov	r0, r5
 8001ae8:	f000 fa08 	bl	8001efc <__sinit>
 8001aec:	4b23      	ldr	r3, [pc, #140]	; (8001b7c <_puts_r+0xac>)
 8001aee:	429c      	cmp	r4, r3
 8001af0:	d117      	bne.n	8001b22 <_puts_r+0x52>
 8001af2:	686c      	ldr	r4, [r5, #4]
 8001af4:	89a3      	ldrh	r3, [r4, #12]
 8001af6:	071b      	lsls	r3, r3, #28
 8001af8:	d51d      	bpl.n	8001b36 <_puts_r+0x66>
 8001afa:	6923      	ldr	r3, [r4, #16]
 8001afc:	b1db      	cbz	r3, 8001b36 <_puts_r+0x66>
 8001afe:	3e01      	subs	r6, #1
 8001b00:	68a3      	ldr	r3, [r4, #8]
 8001b02:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001b06:	3b01      	subs	r3, #1
 8001b08:	60a3      	str	r3, [r4, #8]
 8001b0a:	b9e9      	cbnz	r1, 8001b48 <_puts_r+0x78>
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	da2e      	bge.n	8001b6e <_puts_r+0x9e>
 8001b10:	4622      	mov	r2, r4
 8001b12:	210a      	movs	r1, #10
 8001b14:	4628      	mov	r0, r5
 8001b16:	f000 f83f 	bl	8001b98 <__swbuf_r>
 8001b1a:	3001      	adds	r0, #1
 8001b1c:	d011      	beq.n	8001b42 <_puts_r+0x72>
 8001b1e:	200a      	movs	r0, #10
 8001b20:	bd70      	pop	{r4, r5, r6, pc}
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <_puts_r+0xb0>)
 8001b24:	429c      	cmp	r4, r3
 8001b26:	d101      	bne.n	8001b2c <_puts_r+0x5c>
 8001b28:	68ac      	ldr	r4, [r5, #8]
 8001b2a:	e7e3      	b.n	8001af4 <_puts_r+0x24>
 8001b2c:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <_puts_r+0xb4>)
 8001b2e:	429c      	cmp	r4, r3
 8001b30:	bf08      	it	eq
 8001b32:	68ec      	ldreq	r4, [r5, #12]
 8001b34:	e7de      	b.n	8001af4 <_puts_r+0x24>
 8001b36:	4621      	mov	r1, r4
 8001b38:	4628      	mov	r0, r5
 8001b3a:	f000 f87f 	bl	8001c3c <__swsetup_r>
 8001b3e:	2800      	cmp	r0, #0
 8001b40:	d0dd      	beq.n	8001afe <_puts_r+0x2e>
 8001b42:	f04f 30ff 	mov.w	r0, #4294967295
 8001b46:	bd70      	pop	{r4, r5, r6, pc}
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	da04      	bge.n	8001b56 <_puts_r+0x86>
 8001b4c:	69a2      	ldr	r2, [r4, #24]
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	db06      	blt.n	8001b60 <_puts_r+0x90>
 8001b52:	290a      	cmp	r1, #10
 8001b54:	d004      	beq.n	8001b60 <_puts_r+0x90>
 8001b56:	6823      	ldr	r3, [r4, #0]
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	6022      	str	r2, [r4, #0]
 8001b5c:	7019      	strb	r1, [r3, #0]
 8001b5e:	e7cf      	b.n	8001b00 <_puts_r+0x30>
 8001b60:	4622      	mov	r2, r4
 8001b62:	4628      	mov	r0, r5
 8001b64:	f000 f818 	bl	8001b98 <__swbuf_r>
 8001b68:	3001      	adds	r0, #1
 8001b6a:	d1c9      	bne.n	8001b00 <_puts_r+0x30>
 8001b6c:	e7e9      	b.n	8001b42 <_puts_r+0x72>
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	200a      	movs	r0, #10
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	6022      	str	r2, [r4, #0]
 8001b76:	7018      	strb	r0, [r3, #0]
 8001b78:	bd70      	pop	{r4, r5, r6, pc}
 8001b7a:	bf00      	nop
 8001b7c:	080029e4 	.word	0x080029e4
 8001b80:	08002a04 	.word	0x08002a04
 8001b84:	080029c4 	.word	0x080029c4

08001b88 <puts>:
 8001b88:	4b02      	ldr	r3, [pc, #8]	; (8001b94 <puts+0xc>)
 8001b8a:	4601      	mov	r1, r0
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	f7ff bf9f 	b.w	8001ad0 <_puts_r>
 8001b92:	bf00      	nop
 8001b94:	2000000c 	.word	0x2000000c

08001b98 <__swbuf_r>:
 8001b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b9a:	460e      	mov	r6, r1
 8001b9c:	4614      	mov	r4, r2
 8001b9e:	4605      	mov	r5, r0
 8001ba0:	b118      	cbz	r0, 8001baa <__swbuf_r+0x12>
 8001ba2:	6983      	ldr	r3, [r0, #24]
 8001ba4:	b90b      	cbnz	r3, 8001baa <__swbuf_r+0x12>
 8001ba6:	f000 f9a9 	bl	8001efc <__sinit>
 8001baa:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <__swbuf_r+0x98>)
 8001bac:	429c      	cmp	r4, r3
 8001bae:	d12a      	bne.n	8001c06 <__swbuf_r+0x6e>
 8001bb0:	686c      	ldr	r4, [r5, #4]
 8001bb2:	69a3      	ldr	r3, [r4, #24]
 8001bb4:	60a3      	str	r3, [r4, #8]
 8001bb6:	89a3      	ldrh	r3, [r4, #12]
 8001bb8:	071a      	lsls	r2, r3, #28
 8001bba:	d52e      	bpl.n	8001c1a <__swbuf_r+0x82>
 8001bbc:	6923      	ldr	r3, [r4, #16]
 8001bbe:	b363      	cbz	r3, 8001c1a <__swbuf_r+0x82>
 8001bc0:	6923      	ldr	r3, [r4, #16]
 8001bc2:	6820      	ldr	r0, [r4, #0]
 8001bc4:	1ac0      	subs	r0, r0, r3
 8001bc6:	6963      	ldr	r3, [r4, #20]
 8001bc8:	b2f6      	uxtb	r6, r6
 8001bca:	4298      	cmp	r0, r3
 8001bcc:	4637      	mov	r7, r6
 8001bce:	db04      	blt.n	8001bda <__swbuf_r+0x42>
 8001bd0:	4621      	mov	r1, r4
 8001bd2:	4628      	mov	r0, r5
 8001bd4:	f000 f928 	bl	8001e28 <_fflush_r>
 8001bd8:	bb28      	cbnz	r0, 8001c26 <__swbuf_r+0x8e>
 8001bda:	68a3      	ldr	r3, [r4, #8]
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	60a3      	str	r3, [r4, #8]
 8001be0:	6823      	ldr	r3, [r4, #0]
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	6022      	str	r2, [r4, #0]
 8001be6:	701e      	strb	r6, [r3, #0]
 8001be8:	6963      	ldr	r3, [r4, #20]
 8001bea:	3001      	adds	r0, #1
 8001bec:	4298      	cmp	r0, r3
 8001bee:	d004      	beq.n	8001bfa <__swbuf_r+0x62>
 8001bf0:	89a3      	ldrh	r3, [r4, #12]
 8001bf2:	07db      	lsls	r3, r3, #31
 8001bf4:	d519      	bpl.n	8001c2a <__swbuf_r+0x92>
 8001bf6:	2e0a      	cmp	r6, #10
 8001bf8:	d117      	bne.n	8001c2a <__swbuf_r+0x92>
 8001bfa:	4621      	mov	r1, r4
 8001bfc:	4628      	mov	r0, r5
 8001bfe:	f000 f913 	bl	8001e28 <_fflush_r>
 8001c02:	b190      	cbz	r0, 8001c2a <__swbuf_r+0x92>
 8001c04:	e00f      	b.n	8001c26 <__swbuf_r+0x8e>
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <__swbuf_r+0x9c>)
 8001c08:	429c      	cmp	r4, r3
 8001c0a:	d101      	bne.n	8001c10 <__swbuf_r+0x78>
 8001c0c:	68ac      	ldr	r4, [r5, #8]
 8001c0e:	e7d0      	b.n	8001bb2 <__swbuf_r+0x1a>
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <__swbuf_r+0xa0>)
 8001c12:	429c      	cmp	r4, r3
 8001c14:	bf08      	it	eq
 8001c16:	68ec      	ldreq	r4, [r5, #12]
 8001c18:	e7cb      	b.n	8001bb2 <__swbuf_r+0x1a>
 8001c1a:	4621      	mov	r1, r4
 8001c1c:	4628      	mov	r0, r5
 8001c1e:	f000 f80d 	bl	8001c3c <__swsetup_r>
 8001c22:	2800      	cmp	r0, #0
 8001c24:	d0cc      	beq.n	8001bc0 <__swbuf_r+0x28>
 8001c26:	f04f 37ff 	mov.w	r7, #4294967295
 8001c2a:	4638      	mov	r0, r7
 8001c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	080029e4 	.word	0x080029e4
 8001c34:	08002a04 	.word	0x08002a04
 8001c38:	080029c4 	.word	0x080029c4

08001c3c <__swsetup_r>:
 8001c3c:	4b32      	ldr	r3, [pc, #200]	; (8001d08 <__swsetup_r+0xcc>)
 8001c3e:	b570      	push	{r4, r5, r6, lr}
 8001c40:	681d      	ldr	r5, [r3, #0]
 8001c42:	4606      	mov	r6, r0
 8001c44:	460c      	mov	r4, r1
 8001c46:	b125      	cbz	r5, 8001c52 <__swsetup_r+0x16>
 8001c48:	69ab      	ldr	r3, [r5, #24]
 8001c4a:	b913      	cbnz	r3, 8001c52 <__swsetup_r+0x16>
 8001c4c:	4628      	mov	r0, r5
 8001c4e:	f000 f955 	bl	8001efc <__sinit>
 8001c52:	4b2e      	ldr	r3, [pc, #184]	; (8001d0c <__swsetup_r+0xd0>)
 8001c54:	429c      	cmp	r4, r3
 8001c56:	d10f      	bne.n	8001c78 <__swsetup_r+0x3c>
 8001c58:	686c      	ldr	r4, [r5, #4]
 8001c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	0715      	lsls	r5, r2, #28
 8001c62:	d42c      	bmi.n	8001cbe <__swsetup_r+0x82>
 8001c64:	06d0      	lsls	r0, r2, #27
 8001c66:	d411      	bmi.n	8001c8c <__swsetup_r+0x50>
 8001c68:	2209      	movs	r2, #9
 8001c6a:	6032      	str	r2, [r6, #0]
 8001c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c70:	81a3      	strh	r3, [r4, #12]
 8001c72:	f04f 30ff 	mov.w	r0, #4294967295
 8001c76:	bd70      	pop	{r4, r5, r6, pc}
 8001c78:	4b25      	ldr	r3, [pc, #148]	; (8001d10 <__swsetup_r+0xd4>)
 8001c7a:	429c      	cmp	r4, r3
 8001c7c:	d101      	bne.n	8001c82 <__swsetup_r+0x46>
 8001c7e:	68ac      	ldr	r4, [r5, #8]
 8001c80:	e7eb      	b.n	8001c5a <__swsetup_r+0x1e>
 8001c82:	4b24      	ldr	r3, [pc, #144]	; (8001d14 <__swsetup_r+0xd8>)
 8001c84:	429c      	cmp	r4, r3
 8001c86:	bf08      	it	eq
 8001c88:	68ec      	ldreq	r4, [r5, #12]
 8001c8a:	e7e6      	b.n	8001c5a <__swsetup_r+0x1e>
 8001c8c:	0751      	lsls	r1, r2, #29
 8001c8e:	d512      	bpl.n	8001cb6 <__swsetup_r+0x7a>
 8001c90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c92:	b141      	cbz	r1, 8001ca6 <__swsetup_r+0x6a>
 8001c94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c98:	4299      	cmp	r1, r3
 8001c9a:	d002      	beq.n	8001ca2 <__swsetup_r+0x66>
 8001c9c:	4630      	mov	r0, r6
 8001c9e:	f000 fa1b 	bl	80020d8 <_free_r>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	6363      	str	r3, [r4, #52]	; 0x34
 8001ca6:	89a3      	ldrh	r3, [r4, #12]
 8001ca8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001cac:	81a3      	strh	r3, [r4, #12]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	6063      	str	r3, [r4, #4]
 8001cb2:	6923      	ldr	r3, [r4, #16]
 8001cb4:	6023      	str	r3, [r4, #0]
 8001cb6:	89a3      	ldrh	r3, [r4, #12]
 8001cb8:	f043 0308 	orr.w	r3, r3, #8
 8001cbc:	81a3      	strh	r3, [r4, #12]
 8001cbe:	6923      	ldr	r3, [r4, #16]
 8001cc0:	b94b      	cbnz	r3, 8001cd6 <__swsetup_r+0x9a>
 8001cc2:	89a3      	ldrh	r3, [r4, #12]
 8001cc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ccc:	d003      	beq.n	8001cd6 <__swsetup_r+0x9a>
 8001cce:	4621      	mov	r1, r4
 8001cd0:	4630      	mov	r0, r6
 8001cd2:	f000 f9c1 	bl	8002058 <__smakebuf_r>
 8001cd6:	89a2      	ldrh	r2, [r4, #12]
 8001cd8:	f012 0301 	ands.w	r3, r2, #1
 8001cdc:	d00c      	beq.n	8001cf8 <__swsetup_r+0xbc>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60a3      	str	r3, [r4, #8]
 8001ce2:	6963      	ldr	r3, [r4, #20]
 8001ce4:	425b      	negs	r3, r3
 8001ce6:	61a3      	str	r3, [r4, #24]
 8001ce8:	6923      	ldr	r3, [r4, #16]
 8001cea:	b953      	cbnz	r3, 8001d02 <__swsetup_r+0xc6>
 8001cec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cf0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001cf4:	d1ba      	bne.n	8001c6c <__swsetup_r+0x30>
 8001cf6:	bd70      	pop	{r4, r5, r6, pc}
 8001cf8:	0792      	lsls	r2, r2, #30
 8001cfa:	bf58      	it	pl
 8001cfc:	6963      	ldrpl	r3, [r4, #20]
 8001cfe:	60a3      	str	r3, [r4, #8]
 8001d00:	e7f2      	b.n	8001ce8 <__swsetup_r+0xac>
 8001d02:	2000      	movs	r0, #0
 8001d04:	e7f7      	b.n	8001cf6 <__swsetup_r+0xba>
 8001d06:	bf00      	nop
 8001d08:	2000000c 	.word	0x2000000c
 8001d0c:	080029e4 	.word	0x080029e4
 8001d10:	08002a04 	.word	0x08002a04
 8001d14:	080029c4 	.word	0x080029c4

08001d18 <__sflush_r>:
 8001d18:	898a      	ldrh	r2, [r1, #12]
 8001d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d1e:	4605      	mov	r5, r0
 8001d20:	0710      	lsls	r0, r2, #28
 8001d22:	460c      	mov	r4, r1
 8001d24:	d45a      	bmi.n	8001ddc <__sflush_r+0xc4>
 8001d26:	684b      	ldr	r3, [r1, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	dc05      	bgt.n	8001d38 <__sflush_r+0x20>
 8001d2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	dc02      	bgt.n	8001d38 <__sflush_r+0x20>
 8001d32:	2000      	movs	r0, #0
 8001d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d3a:	2e00      	cmp	r6, #0
 8001d3c:	d0f9      	beq.n	8001d32 <__sflush_r+0x1a>
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001d44:	682f      	ldr	r7, [r5, #0]
 8001d46:	602b      	str	r3, [r5, #0]
 8001d48:	d033      	beq.n	8001db2 <__sflush_r+0x9a>
 8001d4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d4c:	89a3      	ldrh	r3, [r4, #12]
 8001d4e:	075a      	lsls	r2, r3, #29
 8001d50:	d505      	bpl.n	8001d5e <__sflush_r+0x46>
 8001d52:	6863      	ldr	r3, [r4, #4]
 8001d54:	1ac0      	subs	r0, r0, r3
 8001d56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d58:	b10b      	cbz	r3, 8001d5e <__sflush_r+0x46>
 8001d5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d5c:	1ac0      	subs	r0, r0, r3
 8001d5e:	2300      	movs	r3, #0
 8001d60:	4602      	mov	r2, r0
 8001d62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d64:	6a21      	ldr	r1, [r4, #32]
 8001d66:	4628      	mov	r0, r5
 8001d68:	47b0      	blx	r6
 8001d6a:	1c43      	adds	r3, r0, #1
 8001d6c:	89a3      	ldrh	r3, [r4, #12]
 8001d6e:	d106      	bne.n	8001d7e <__sflush_r+0x66>
 8001d70:	6829      	ldr	r1, [r5, #0]
 8001d72:	291d      	cmp	r1, #29
 8001d74:	d84b      	bhi.n	8001e0e <__sflush_r+0xf6>
 8001d76:	4a2b      	ldr	r2, [pc, #172]	; (8001e24 <__sflush_r+0x10c>)
 8001d78:	40ca      	lsrs	r2, r1
 8001d7a:	07d6      	lsls	r6, r2, #31
 8001d7c:	d547      	bpl.n	8001e0e <__sflush_r+0xf6>
 8001d7e:	2200      	movs	r2, #0
 8001d80:	6062      	str	r2, [r4, #4]
 8001d82:	04d9      	lsls	r1, r3, #19
 8001d84:	6922      	ldr	r2, [r4, #16]
 8001d86:	6022      	str	r2, [r4, #0]
 8001d88:	d504      	bpl.n	8001d94 <__sflush_r+0x7c>
 8001d8a:	1c42      	adds	r2, r0, #1
 8001d8c:	d101      	bne.n	8001d92 <__sflush_r+0x7a>
 8001d8e:	682b      	ldr	r3, [r5, #0]
 8001d90:	b903      	cbnz	r3, 8001d94 <__sflush_r+0x7c>
 8001d92:	6560      	str	r0, [r4, #84]	; 0x54
 8001d94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d96:	602f      	str	r7, [r5, #0]
 8001d98:	2900      	cmp	r1, #0
 8001d9a:	d0ca      	beq.n	8001d32 <__sflush_r+0x1a>
 8001d9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001da0:	4299      	cmp	r1, r3
 8001da2:	d002      	beq.n	8001daa <__sflush_r+0x92>
 8001da4:	4628      	mov	r0, r5
 8001da6:	f000 f997 	bl	80020d8 <_free_r>
 8001daa:	2000      	movs	r0, #0
 8001dac:	6360      	str	r0, [r4, #52]	; 0x34
 8001dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001db2:	6a21      	ldr	r1, [r4, #32]
 8001db4:	2301      	movs	r3, #1
 8001db6:	4628      	mov	r0, r5
 8001db8:	47b0      	blx	r6
 8001dba:	1c41      	adds	r1, r0, #1
 8001dbc:	d1c6      	bne.n	8001d4c <__sflush_r+0x34>
 8001dbe:	682b      	ldr	r3, [r5, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0c3      	beq.n	8001d4c <__sflush_r+0x34>
 8001dc4:	2b1d      	cmp	r3, #29
 8001dc6:	d001      	beq.n	8001dcc <__sflush_r+0xb4>
 8001dc8:	2b16      	cmp	r3, #22
 8001dca:	d101      	bne.n	8001dd0 <__sflush_r+0xb8>
 8001dcc:	602f      	str	r7, [r5, #0]
 8001dce:	e7b0      	b.n	8001d32 <__sflush_r+0x1a>
 8001dd0:	89a3      	ldrh	r3, [r4, #12]
 8001dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dd6:	81a3      	strh	r3, [r4, #12]
 8001dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ddc:	690f      	ldr	r7, [r1, #16]
 8001dde:	2f00      	cmp	r7, #0
 8001de0:	d0a7      	beq.n	8001d32 <__sflush_r+0x1a>
 8001de2:	0793      	lsls	r3, r2, #30
 8001de4:	680e      	ldr	r6, [r1, #0]
 8001de6:	bf08      	it	eq
 8001de8:	694b      	ldreq	r3, [r1, #20]
 8001dea:	600f      	str	r7, [r1, #0]
 8001dec:	bf18      	it	ne
 8001dee:	2300      	movne	r3, #0
 8001df0:	eba6 0807 	sub.w	r8, r6, r7
 8001df4:	608b      	str	r3, [r1, #8]
 8001df6:	f1b8 0f00 	cmp.w	r8, #0
 8001dfa:	dd9a      	ble.n	8001d32 <__sflush_r+0x1a>
 8001dfc:	4643      	mov	r3, r8
 8001dfe:	463a      	mov	r2, r7
 8001e00:	6a21      	ldr	r1, [r4, #32]
 8001e02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001e04:	4628      	mov	r0, r5
 8001e06:	47b0      	blx	r6
 8001e08:	2800      	cmp	r0, #0
 8001e0a:	dc07      	bgt.n	8001e1c <__sflush_r+0x104>
 8001e0c:	89a3      	ldrh	r3, [r4, #12]
 8001e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e12:	81a3      	strh	r3, [r4, #12]
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295
 8001e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e1c:	4407      	add	r7, r0
 8001e1e:	eba8 0800 	sub.w	r8, r8, r0
 8001e22:	e7e8      	b.n	8001df6 <__sflush_r+0xde>
 8001e24:	20400001 	.word	0x20400001

08001e28 <_fflush_r>:
 8001e28:	b538      	push	{r3, r4, r5, lr}
 8001e2a:	690b      	ldr	r3, [r1, #16]
 8001e2c:	4605      	mov	r5, r0
 8001e2e:	460c      	mov	r4, r1
 8001e30:	b1db      	cbz	r3, 8001e6a <_fflush_r+0x42>
 8001e32:	b118      	cbz	r0, 8001e3c <_fflush_r+0x14>
 8001e34:	6983      	ldr	r3, [r0, #24]
 8001e36:	b90b      	cbnz	r3, 8001e3c <_fflush_r+0x14>
 8001e38:	f000 f860 	bl	8001efc <__sinit>
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <_fflush_r+0x48>)
 8001e3e:	429c      	cmp	r4, r3
 8001e40:	d109      	bne.n	8001e56 <_fflush_r+0x2e>
 8001e42:	686c      	ldr	r4, [r5, #4]
 8001e44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e48:	b17b      	cbz	r3, 8001e6a <_fflush_r+0x42>
 8001e4a:	4621      	mov	r1, r4
 8001e4c:	4628      	mov	r0, r5
 8001e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e52:	f7ff bf61 	b.w	8001d18 <__sflush_r>
 8001e56:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <_fflush_r+0x4c>)
 8001e58:	429c      	cmp	r4, r3
 8001e5a:	d101      	bne.n	8001e60 <_fflush_r+0x38>
 8001e5c:	68ac      	ldr	r4, [r5, #8]
 8001e5e:	e7f1      	b.n	8001e44 <_fflush_r+0x1c>
 8001e60:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <_fflush_r+0x50>)
 8001e62:	429c      	cmp	r4, r3
 8001e64:	bf08      	it	eq
 8001e66:	68ec      	ldreq	r4, [r5, #12]
 8001e68:	e7ec      	b.n	8001e44 <_fflush_r+0x1c>
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	bd38      	pop	{r3, r4, r5, pc}
 8001e6e:	bf00      	nop
 8001e70:	080029e4 	.word	0x080029e4
 8001e74:	08002a04 	.word	0x08002a04
 8001e78:	080029c4 	.word	0x080029c4

08001e7c <_cleanup_r>:
 8001e7c:	4901      	ldr	r1, [pc, #4]	; (8001e84 <_cleanup_r+0x8>)
 8001e7e:	f000 b8a9 	b.w	8001fd4 <_fwalk_reent>
 8001e82:	bf00      	nop
 8001e84:	08001e29 	.word	0x08001e29

08001e88 <std.isra.0>:
 8001e88:	2300      	movs	r3, #0
 8001e8a:	b510      	push	{r4, lr}
 8001e8c:	4604      	mov	r4, r0
 8001e8e:	6003      	str	r3, [r0, #0]
 8001e90:	6043      	str	r3, [r0, #4]
 8001e92:	6083      	str	r3, [r0, #8]
 8001e94:	8181      	strh	r1, [r0, #12]
 8001e96:	6643      	str	r3, [r0, #100]	; 0x64
 8001e98:	81c2      	strh	r2, [r0, #14]
 8001e9a:	6103      	str	r3, [r0, #16]
 8001e9c:	6143      	str	r3, [r0, #20]
 8001e9e:	6183      	str	r3, [r0, #24]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	2208      	movs	r2, #8
 8001ea4:	305c      	adds	r0, #92	; 0x5c
 8001ea6:	f7ff fdf3 	bl	8001a90 <memset>
 8001eaa:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <std.isra.0+0x38>)
 8001eac:	6263      	str	r3, [r4, #36]	; 0x24
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <std.isra.0+0x3c>)
 8001eb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8001eb2:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <std.isra.0+0x40>)
 8001eb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001eb6:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <std.isra.0+0x44>)
 8001eb8:	6224      	str	r4, [r4, #32]
 8001eba:	6323      	str	r3, [r4, #48]	; 0x30
 8001ebc:	bd10      	pop	{r4, pc}
 8001ebe:	bf00      	nop
 8001ec0:	080027fd 	.word	0x080027fd
 8001ec4:	0800281f 	.word	0x0800281f
 8001ec8:	08002857 	.word	0x08002857
 8001ecc:	0800287b 	.word	0x0800287b

08001ed0 <__sfmoreglue>:
 8001ed0:	b570      	push	{r4, r5, r6, lr}
 8001ed2:	1e4a      	subs	r2, r1, #1
 8001ed4:	2568      	movs	r5, #104	; 0x68
 8001ed6:	4355      	muls	r5, r2
 8001ed8:	460e      	mov	r6, r1
 8001eda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001ede:	f000 f949 	bl	8002174 <_malloc_r>
 8001ee2:	4604      	mov	r4, r0
 8001ee4:	b140      	cbz	r0, 8001ef8 <__sfmoreglue+0x28>
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	e880 0042 	stmia.w	r0, {r1, r6}
 8001eec:	300c      	adds	r0, #12
 8001eee:	60a0      	str	r0, [r4, #8]
 8001ef0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001ef4:	f7ff fdcc 	bl	8001a90 <memset>
 8001ef8:	4620      	mov	r0, r4
 8001efa:	bd70      	pop	{r4, r5, r6, pc}

08001efc <__sinit>:
 8001efc:	6983      	ldr	r3, [r0, #24]
 8001efe:	b510      	push	{r4, lr}
 8001f00:	4604      	mov	r4, r0
 8001f02:	bb33      	cbnz	r3, 8001f52 <__sinit+0x56>
 8001f04:	6483      	str	r3, [r0, #72]	; 0x48
 8001f06:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001f08:	6503      	str	r3, [r0, #80]	; 0x50
 8001f0a:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <__sinit+0x58>)
 8001f0c:	4a12      	ldr	r2, [pc, #72]	; (8001f58 <__sinit+0x5c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6282      	str	r2, [r0, #40]	; 0x28
 8001f12:	4298      	cmp	r0, r3
 8001f14:	bf04      	itt	eq
 8001f16:	2301      	moveq	r3, #1
 8001f18:	6183      	streq	r3, [r0, #24]
 8001f1a:	f000 f81f 	bl	8001f5c <__sfp>
 8001f1e:	6060      	str	r0, [r4, #4]
 8001f20:	4620      	mov	r0, r4
 8001f22:	f000 f81b 	bl	8001f5c <__sfp>
 8001f26:	60a0      	str	r0, [r4, #8]
 8001f28:	4620      	mov	r0, r4
 8001f2a:	f000 f817 	bl	8001f5c <__sfp>
 8001f2e:	2200      	movs	r2, #0
 8001f30:	60e0      	str	r0, [r4, #12]
 8001f32:	2104      	movs	r1, #4
 8001f34:	6860      	ldr	r0, [r4, #4]
 8001f36:	f7ff ffa7 	bl	8001e88 <std.isra.0>
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	2109      	movs	r1, #9
 8001f3e:	68a0      	ldr	r0, [r4, #8]
 8001f40:	f7ff ffa2 	bl	8001e88 <std.isra.0>
 8001f44:	2202      	movs	r2, #2
 8001f46:	2112      	movs	r1, #18
 8001f48:	68e0      	ldr	r0, [r4, #12]
 8001f4a:	f7ff ff9d 	bl	8001e88 <std.isra.0>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	61a3      	str	r3, [r4, #24]
 8001f52:	bd10      	pop	{r4, pc}
 8001f54:	080029c0 	.word	0x080029c0
 8001f58:	08001e7d 	.word	0x08001e7d

08001f5c <__sfp>:
 8001f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <__sfp+0x74>)
 8001f60:	681e      	ldr	r6, [r3, #0]
 8001f62:	69b3      	ldr	r3, [r6, #24]
 8001f64:	4607      	mov	r7, r0
 8001f66:	b913      	cbnz	r3, 8001f6e <__sfp+0x12>
 8001f68:	4630      	mov	r0, r6
 8001f6a:	f7ff ffc7 	bl	8001efc <__sinit>
 8001f6e:	3648      	adds	r6, #72	; 0x48
 8001f70:	68b4      	ldr	r4, [r6, #8]
 8001f72:	6873      	ldr	r3, [r6, #4]
 8001f74:	3b01      	subs	r3, #1
 8001f76:	d503      	bpl.n	8001f80 <__sfp+0x24>
 8001f78:	6833      	ldr	r3, [r6, #0]
 8001f7a:	b133      	cbz	r3, 8001f8a <__sfp+0x2e>
 8001f7c:	6836      	ldr	r6, [r6, #0]
 8001f7e:	e7f7      	b.n	8001f70 <__sfp+0x14>
 8001f80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001f84:	b16d      	cbz	r5, 8001fa2 <__sfp+0x46>
 8001f86:	3468      	adds	r4, #104	; 0x68
 8001f88:	e7f4      	b.n	8001f74 <__sfp+0x18>
 8001f8a:	2104      	movs	r1, #4
 8001f8c:	4638      	mov	r0, r7
 8001f8e:	f7ff ff9f 	bl	8001ed0 <__sfmoreglue>
 8001f92:	6030      	str	r0, [r6, #0]
 8001f94:	2800      	cmp	r0, #0
 8001f96:	d1f1      	bne.n	8001f7c <__sfp+0x20>
 8001f98:	230c      	movs	r3, #12
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	4604      	mov	r4, r0
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fa6:	81e3      	strh	r3, [r4, #14]
 8001fa8:	2301      	movs	r3, #1
 8001faa:	81a3      	strh	r3, [r4, #12]
 8001fac:	6665      	str	r5, [r4, #100]	; 0x64
 8001fae:	6025      	str	r5, [r4, #0]
 8001fb0:	60a5      	str	r5, [r4, #8]
 8001fb2:	6065      	str	r5, [r4, #4]
 8001fb4:	6125      	str	r5, [r4, #16]
 8001fb6:	6165      	str	r5, [r4, #20]
 8001fb8:	61a5      	str	r5, [r4, #24]
 8001fba:	2208      	movs	r2, #8
 8001fbc:	4629      	mov	r1, r5
 8001fbe:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001fc2:	f7ff fd65 	bl	8001a90 <memset>
 8001fc6:	6365      	str	r5, [r4, #52]	; 0x34
 8001fc8:	63a5      	str	r5, [r4, #56]	; 0x38
 8001fca:	64a5      	str	r5, [r4, #72]	; 0x48
 8001fcc:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001fce:	e7e6      	b.n	8001f9e <__sfp+0x42>
 8001fd0:	080029c0 	.word	0x080029c0

08001fd4 <_fwalk_reent>:
 8001fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fd8:	4680      	mov	r8, r0
 8001fda:	4689      	mov	r9, r1
 8001fdc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001fe0:	2600      	movs	r6, #0
 8001fe2:	b914      	cbnz	r4, 8001fea <_fwalk_reent+0x16>
 8001fe4:	4630      	mov	r0, r6
 8001fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fea:	68a5      	ldr	r5, [r4, #8]
 8001fec:	6867      	ldr	r7, [r4, #4]
 8001fee:	3f01      	subs	r7, #1
 8001ff0:	d501      	bpl.n	8001ff6 <_fwalk_reent+0x22>
 8001ff2:	6824      	ldr	r4, [r4, #0]
 8001ff4:	e7f5      	b.n	8001fe2 <_fwalk_reent+0xe>
 8001ff6:	89ab      	ldrh	r3, [r5, #12]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d907      	bls.n	800200c <_fwalk_reent+0x38>
 8001ffc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002000:	3301      	adds	r3, #1
 8002002:	d003      	beq.n	800200c <_fwalk_reent+0x38>
 8002004:	4629      	mov	r1, r5
 8002006:	4640      	mov	r0, r8
 8002008:	47c8      	blx	r9
 800200a:	4306      	orrs	r6, r0
 800200c:	3568      	adds	r5, #104	; 0x68
 800200e:	e7ee      	b.n	8001fee <_fwalk_reent+0x1a>

08002010 <__swhatbuf_r>:
 8002010:	b570      	push	{r4, r5, r6, lr}
 8002012:	460e      	mov	r6, r1
 8002014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002018:	2900      	cmp	r1, #0
 800201a:	b090      	sub	sp, #64	; 0x40
 800201c:	4614      	mov	r4, r2
 800201e:	461d      	mov	r5, r3
 8002020:	da07      	bge.n	8002032 <__swhatbuf_r+0x22>
 8002022:	2300      	movs	r3, #0
 8002024:	602b      	str	r3, [r5, #0]
 8002026:	89b3      	ldrh	r3, [r6, #12]
 8002028:	061a      	lsls	r2, r3, #24
 800202a:	d410      	bmi.n	800204e <__swhatbuf_r+0x3e>
 800202c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002030:	e00e      	b.n	8002050 <__swhatbuf_r+0x40>
 8002032:	aa01      	add	r2, sp, #4
 8002034:	f000 fc48 	bl	80028c8 <_fstat_r>
 8002038:	2800      	cmp	r0, #0
 800203a:	dbf2      	blt.n	8002022 <__swhatbuf_r+0x12>
 800203c:	9a02      	ldr	r2, [sp, #8]
 800203e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002042:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002046:	425a      	negs	r2, r3
 8002048:	415a      	adcs	r2, r3
 800204a:	602a      	str	r2, [r5, #0]
 800204c:	e7ee      	b.n	800202c <__swhatbuf_r+0x1c>
 800204e:	2340      	movs	r3, #64	; 0x40
 8002050:	2000      	movs	r0, #0
 8002052:	6023      	str	r3, [r4, #0]
 8002054:	b010      	add	sp, #64	; 0x40
 8002056:	bd70      	pop	{r4, r5, r6, pc}

08002058 <__smakebuf_r>:
 8002058:	898b      	ldrh	r3, [r1, #12]
 800205a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800205c:	079d      	lsls	r5, r3, #30
 800205e:	4606      	mov	r6, r0
 8002060:	460c      	mov	r4, r1
 8002062:	d507      	bpl.n	8002074 <__smakebuf_r+0x1c>
 8002064:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002068:	6023      	str	r3, [r4, #0]
 800206a:	6123      	str	r3, [r4, #16]
 800206c:	2301      	movs	r3, #1
 800206e:	6163      	str	r3, [r4, #20]
 8002070:	b002      	add	sp, #8
 8002072:	bd70      	pop	{r4, r5, r6, pc}
 8002074:	ab01      	add	r3, sp, #4
 8002076:	466a      	mov	r2, sp
 8002078:	f7ff ffca 	bl	8002010 <__swhatbuf_r>
 800207c:	9900      	ldr	r1, [sp, #0]
 800207e:	4605      	mov	r5, r0
 8002080:	4630      	mov	r0, r6
 8002082:	f000 f877 	bl	8002174 <_malloc_r>
 8002086:	b948      	cbnz	r0, 800209c <__smakebuf_r+0x44>
 8002088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800208c:	059a      	lsls	r2, r3, #22
 800208e:	d4ef      	bmi.n	8002070 <__smakebuf_r+0x18>
 8002090:	f023 0303 	bic.w	r3, r3, #3
 8002094:	f043 0302 	orr.w	r3, r3, #2
 8002098:	81a3      	strh	r3, [r4, #12]
 800209a:	e7e3      	b.n	8002064 <__smakebuf_r+0xc>
 800209c:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <__smakebuf_r+0x7c>)
 800209e:	62b3      	str	r3, [r6, #40]	; 0x28
 80020a0:	89a3      	ldrh	r3, [r4, #12]
 80020a2:	6020      	str	r0, [r4, #0]
 80020a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a8:	81a3      	strh	r3, [r4, #12]
 80020aa:	9b00      	ldr	r3, [sp, #0]
 80020ac:	6163      	str	r3, [r4, #20]
 80020ae:	9b01      	ldr	r3, [sp, #4]
 80020b0:	6120      	str	r0, [r4, #16]
 80020b2:	b15b      	cbz	r3, 80020cc <__smakebuf_r+0x74>
 80020b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020b8:	4630      	mov	r0, r6
 80020ba:	f000 fc17 	bl	80028ec <_isatty_r>
 80020be:	b128      	cbz	r0, 80020cc <__smakebuf_r+0x74>
 80020c0:	89a3      	ldrh	r3, [r4, #12]
 80020c2:	f023 0303 	bic.w	r3, r3, #3
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	81a3      	strh	r3, [r4, #12]
 80020cc:	89a3      	ldrh	r3, [r4, #12]
 80020ce:	431d      	orrs	r5, r3
 80020d0:	81a5      	strh	r5, [r4, #12]
 80020d2:	e7cd      	b.n	8002070 <__smakebuf_r+0x18>
 80020d4:	08001e7d 	.word	0x08001e7d

080020d8 <_free_r>:
 80020d8:	b538      	push	{r3, r4, r5, lr}
 80020da:	4605      	mov	r5, r0
 80020dc:	2900      	cmp	r1, #0
 80020de:	d045      	beq.n	800216c <_free_r+0x94>
 80020e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020e4:	1f0c      	subs	r4, r1, #4
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	bfb8      	it	lt
 80020ea:	18e4      	addlt	r4, r4, r3
 80020ec:	f000 fc20 	bl	8002930 <__malloc_lock>
 80020f0:	4a1f      	ldr	r2, [pc, #124]	; (8002170 <_free_r+0x98>)
 80020f2:	6813      	ldr	r3, [r2, #0]
 80020f4:	4610      	mov	r0, r2
 80020f6:	b933      	cbnz	r3, 8002106 <_free_r+0x2e>
 80020f8:	6063      	str	r3, [r4, #4]
 80020fa:	6014      	str	r4, [r2, #0]
 80020fc:	4628      	mov	r0, r5
 80020fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002102:	f000 bc16 	b.w	8002932 <__malloc_unlock>
 8002106:	42a3      	cmp	r3, r4
 8002108:	d90c      	bls.n	8002124 <_free_r+0x4c>
 800210a:	6821      	ldr	r1, [r4, #0]
 800210c:	1862      	adds	r2, r4, r1
 800210e:	4293      	cmp	r3, r2
 8002110:	bf04      	itt	eq
 8002112:	681a      	ldreq	r2, [r3, #0]
 8002114:	685b      	ldreq	r3, [r3, #4]
 8002116:	6063      	str	r3, [r4, #4]
 8002118:	bf04      	itt	eq
 800211a:	1852      	addeq	r2, r2, r1
 800211c:	6022      	streq	r2, [r4, #0]
 800211e:	6004      	str	r4, [r0, #0]
 8002120:	e7ec      	b.n	80020fc <_free_r+0x24>
 8002122:	4613      	mov	r3, r2
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	b10a      	cbz	r2, 800212c <_free_r+0x54>
 8002128:	42a2      	cmp	r2, r4
 800212a:	d9fa      	bls.n	8002122 <_free_r+0x4a>
 800212c:	6819      	ldr	r1, [r3, #0]
 800212e:	1858      	adds	r0, r3, r1
 8002130:	42a0      	cmp	r0, r4
 8002132:	d10b      	bne.n	800214c <_free_r+0x74>
 8002134:	6820      	ldr	r0, [r4, #0]
 8002136:	4401      	add	r1, r0
 8002138:	1858      	adds	r0, r3, r1
 800213a:	4282      	cmp	r2, r0
 800213c:	6019      	str	r1, [r3, #0]
 800213e:	d1dd      	bne.n	80020fc <_free_r+0x24>
 8002140:	6810      	ldr	r0, [r2, #0]
 8002142:	6852      	ldr	r2, [r2, #4]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	4401      	add	r1, r0
 8002148:	6019      	str	r1, [r3, #0]
 800214a:	e7d7      	b.n	80020fc <_free_r+0x24>
 800214c:	d902      	bls.n	8002154 <_free_r+0x7c>
 800214e:	230c      	movs	r3, #12
 8002150:	602b      	str	r3, [r5, #0]
 8002152:	e7d3      	b.n	80020fc <_free_r+0x24>
 8002154:	6820      	ldr	r0, [r4, #0]
 8002156:	1821      	adds	r1, r4, r0
 8002158:	428a      	cmp	r2, r1
 800215a:	bf04      	itt	eq
 800215c:	6811      	ldreq	r1, [r2, #0]
 800215e:	6852      	ldreq	r2, [r2, #4]
 8002160:	6062      	str	r2, [r4, #4]
 8002162:	bf04      	itt	eq
 8002164:	1809      	addeq	r1, r1, r0
 8002166:	6021      	streq	r1, [r4, #0]
 8002168:	605c      	str	r4, [r3, #4]
 800216a:	e7c7      	b.n	80020fc <_free_r+0x24>
 800216c:	bd38      	pop	{r3, r4, r5, pc}
 800216e:	bf00      	nop
 8002170:	200002b0 	.word	0x200002b0

08002174 <_malloc_r>:
 8002174:	b570      	push	{r4, r5, r6, lr}
 8002176:	1ccd      	adds	r5, r1, #3
 8002178:	f025 0503 	bic.w	r5, r5, #3
 800217c:	3508      	adds	r5, #8
 800217e:	2d0c      	cmp	r5, #12
 8002180:	bf38      	it	cc
 8002182:	250c      	movcc	r5, #12
 8002184:	2d00      	cmp	r5, #0
 8002186:	4606      	mov	r6, r0
 8002188:	db01      	blt.n	800218e <_malloc_r+0x1a>
 800218a:	42a9      	cmp	r1, r5
 800218c:	d903      	bls.n	8002196 <_malloc_r+0x22>
 800218e:	230c      	movs	r3, #12
 8002190:	6033      	str	r3, [r6, #0]
 8002192:	2000      	movs	r0, #0
 8002194:	bd70      	pop	{r4, r5, r6, pc}
 8002196:	f000 fbcb 	bl	8002930 <__malloc_lock>
 800219a:	4a23      	ldr	r2, [pc, #140]	; (8002228 <_malloc_r+0xb4>)
 800219c:	6814      	ldr	r4, [r2, #0]
 800219e:	4621      	mov	r1, r4
 80021a0:	b991      	cbnz	r1, 80021c8 <_malloc_r+0x54>
 80021a2:	4c22      	ldr	r4, [pc, #136]	; (800222c <_malloc_r+0xb8>)
 80021a4:	6823      	ldr	r3, [r4, #0]
 80021a6:	b91b      	cbnz	r3, 80021b0 <_malloc_r+0x3c>
 80021a8:	4630      	mov	r0, r6
 80021aa:	f000 fb17 	bl	80027dc <_sbrk_r>
 80021ae:	6020      	str	r0, [r4, #0]
 80021b0:	4629      	mov	r1, r5
 80021b2:	4630      	mov	r0, r6
 80021b4:	f000 fb12 	bl	80027dc <_sbrk_r>
 80021b8:	1c43      	adds	r3, r0, #1
 80021ba:	d126      	bne.n	800220a <_malloc_r+0x96>
 80021bc:	230c      	movs	r3, #12
 80021be:	6033      	str	r3, [r6, #0]
 80021c0:	4630      	mov	r0, r6
 80021c2:	f000 fbb6 	bl	8002932 <__malloc_unlock>
 80021c6:	e7e4      	b.n	8002192 <_malloc_r+0x1e>
 80021c8:	680b      	ldr	r3, [r1, #0]
 80021ca:	1b5b      	subs	r3, r3, r5
 80021cc:	d41a      	bmi.n	8002204 <_malloc_r+0x90>
 80021ce:	2b0b      	cmp	r3, #11
 80021d0:	d90f      	bls.n	80021f2 <_malloc_r+0x7e>
 80021d2:	600b      	str	r3, [r1, #0]
 80021d4:	50cd      	str	r5, [r1, r3]
 80021d6:	18cc      	adds	r4, r1, r3
 80021d8:	4630      	mov	r0, r6
 80021da:	f000 fbaa 	bl	8002932 <__malloc_unlock>
 80021de:	f104 000b 	add.w	r0, r4, #11
 80021e2:	1d23      	adds	r3, r4, #4
 80021e4:	f020 0007 	bic.w	r0, r0, #7
 80021e8:	1ac3      	subs	r3, r0, r3
 80021ea:	d01b      	beq.n	8002224 <_malloc_r+0xb0>
 80021ec:	425a      	negs	r2, r3
 80021ee:	50e2      	str	r2, [r4, r3]
 80021f0:	bd70      	pop	{r4, r5, r6, pc}
 80021f2:	428c      	cmp	r4, r1
 80021f4:	bf0d      	iteet	eq
 80021f6:	6863      	ldreq	r3, [r4, #4]
 80021f8:	684b      	ldrne	r3, [r1, #4]
 80021fa:	6063      	strne	r3, [r4, #4]
 80021fc:	6013      	streq	r3, [r2, #0]
 80021fe:	bf18      	it	ne
 8002200:	460c      	movne	r4, r1
 8002202:	e7e9      	b.n	80021d8 <_malloc_r+0x64>
 8002204:	460c      	mov	r4, r1
 8002206:	6849      	ldr	r1, [r1, #4]
 8002208:	e7ca      	b.n	80021a0 <_malloc_r+0x2c>
 800220a:	1cc4      	adds	r4, r0, #3
 800220c:	f024 0403 	bic.w	r4, r4, #3
 8002210:	42a0      	cmp	r0, r4
 8002212:	d005      	beq.n	8002220 <_malloc_r+0xac>
 8002214:	1a21      	subs	r1, r4, r0
 8002216:	4630      	mov	r0, r6
 8002218:	f000 fae0 	bl	80027dc <_sbrk_r>
 800221c:	3001      	adds	r0, #1
 800221e:	d0cd      	beq.n	80021bc <_malloc_r+0x48>
 8002220:	6025      	str	r5, [r4, #0]
 8002222:	e7d9      	b.n	80021d8 <_malloc_r+0x64>
 8002224:	bd70      	pop	{r4, r5, r6, pc}
 8002226:	bf00      	nop
 8002228:	200002b0 	.word	0x200002b0
 800222c:	200002b4 	.word	0x200002b4

08002230 <__sfputc_r>:
 8002230:	6893      	ldr	r3, [r2, #8]
 8002232:	3b01      	subs	r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	b410      	push	{r4}
 8002238:	6093      	str	r3, [r2, #8]
 800223a:	da09      	bge.n	8002250 <__sfputc_r+0x20>
 800223c:	6994      	ldr	r4, [r2, #24]
 800223e:	42a3      	cmp	r3, r4
 8002240:	db02      	blt.n	8002248 <__sfputc_r+0x18>
 8002242:	b2cb      	uxtb	r3, r1
 8002244:	2b0a      	cmp	r3, #10
 8002246:	d103      	bne.n	8002250 <__sfputc_r+0x20>
 8002248:	f85d 4b04 	ldr.w	r4, [sp], #4
 800224c:	f7ff bca4 	b.w	8001b98 <__swbuf_r>
 8002250:	6813      	ldr	r3, [r2, #0]
 8002252:	1c58      	adds	r0, r3, #1
 8002254:	6010      	str	r0, [r2, #0]
 8002256:	7019      	strb	r1, [r3, #0]
 8002258:	b2c8      	uxtb	r0, r1
 800225a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800225e:	4770      	bx	lr

08002260 <__sfputs_r>:
 8002260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002262:	4606      	mov	r6, r0
 8002264:	460f      	mov	r7, r1
 8002266:	4614      	mov	r4, r2
 8002268:	18d5      	adds	r5, r2, r3
 800226a:	42ac      	cmp	r4, r5
 800226c:	d101      	bne.n	8002272 <__sfputs_r+0x12>
 800226e:	2000      	movs	r0, #0
 8002270:	e007      	b.n	8002282 <__sfputs_r+0x22>
 8002272:	463a      	mov	r2, r7
 8002274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002278:	4630      	mov	r0, r6
 800227a:	f7ff ffd9 	bl	8002230 <__sfputc_r>
 800227e:	1c43      	adds	r3, r0, #1
 8002280:	d1f3      	bne.n	800226a <__sfputs_r+0xa>
 8002282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002284 <_vfiprintf_r>:
 8002284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002288:	b09d      	sub	sp, #116	; 0x74
 800228a:	460c      	mov	r4, r1
 800228c:	4617      	mov	r7, r2
 800228e:	9303      	str	r3, [sp, #12]
 8002290:	4606      	mov	r6, r0
 8002292:	b118      	cbz	r0, 800229c <_vfiprintf_r+0x18>
 8002294:	6983      	ldr	r3, [r0, #24]
 8002296:	b90b      	cbnz	r3, 800229c <_vfiprintf_r+0x18>
 8002298:	f7ff fe30 	bl	8001efc <__sinit>
 800229c:	4b7c      	ldr	r3, [pc, #496]	; (8002490 <_vfiprintf_r+0x20c>)
 800229e:	429c      	cmp	r4, r3
 80022a0:	d157      	bne.n	8002352 <_vfiprintf_r+0xce>
 80022a2:	6874      	ldr	r4, [r6, #4]
 80022a4:	89a3      	ldrh	r3, [r4, #12]
 80022a6:	0718      	lsls	r0, r3, #28
 80022a8:	d55d      	bpl.n	8002366 <_vfiprintf_r+0xe2>
 80022aa:	6923      	ldr	r3, [r4, #16]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d05a      	beq.n	8002366 <_vfiprintf_r+0xe2>
 80022b0:	2300      	movs	r3, #0
 80022b2:	9309      	str	r3, [sp, #36]	; 0x24
 80022b4:	2320      	movs	r3, #32
 80022b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80022ba:	2330      	movs	r3, #48	; 0x30
 80022bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80022c0:	f04f 0b01 	mov.w	fp, #1
 80022c4:	46b8      	mov	r8, r7
 80022c6:	4645      	mov	r5, r8
 80022c8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d155      	bne.n	800237c <_vfiprintf_r+0xf8>
 80022d0:	ebb8 0a07 	subs.w	sl, r8, r7
 80022d4:	d00b      	beq.n	80022ee <_vfiprintf_r+0x6a>
 80022d6:	4653      	mov	r3, sl
 80022d8:	463a      	mov	r2, r7
 80022da:	4621      	mov	r1, r4
 80022dc:	4630      	mov	r0, r6
 80022de:	f7ff ffbf 	bl	8002260 <__sfputs_r>
 80022e2:	3001      	adds	r0, #1
 80022e4:	f000 80c4 	beq.w	8002470 <_vfiprintf_r+0x1ec>
 80022e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022ea:	4453      	add	r3, sl
 80022ec:	9309      	str	r3, [sp, #36]	; 0x24
 80022ee:	f898 3000 	ldrb.w	r3, [r8]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 80bc 	beq.w	8002470 <_vfiprintf_r+0x1ec>
 80022f8:	2300      	movs	r3, #0
 80022fa:	f04f 32ff 	mov.w	r2, #4294967295
 80022fe:	9304      	str	r3, [sp, #16]
 8002300:	9307      	str	r3, [sp, #28]
 8002302:	9205      	str	r2, [sp, #20]
 8002304:	9306      	str	r3, [sp, #24]
 8002306:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800230a:	931a      	str	r3, [sp, #104]	; 0x68
 800230c:	2205      	movs	r2, #5
 800230e:	7829      	ldrb	r1, [r5, #0]
 8002310:	4860      	ldr	r0, [pc, #384]	; (8002494 <_vfiprintf_r+0x210>)
 8002312:	f7fd ff5d 	bl	80001d0 <memchr>
 8002316:	f105 0801 	add.w	r8, r5, #1
 800231a:	9b04      	ldr	r3, [sp, #16]
 800231c:	2800      	cmp	r0, #0
 800231e:	d131      	bne.n	8002384 <_vfiprintf_r+0x100>
 8002320:	06d9      	lsls	r1, r3, #27
 8002322:	bf44      	itt	mi
 8002324:	2220      	movmi	r2, #32
 8002326:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800232a:	071a      	lsls	r2, r3, #28
 800232c:	bf44      	itt	mi
 800232e:	222b      	movmi	r2, #43	; 0x2b
 8002330:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002334:	782a      	ldrb	r2, [r5, #0]
 8002336:	2a2a      	cmp	r2, #42	; 0x2a
 8002338:	d02c      	beq.n	8002394 <_vfiprintf_r+0x110>
 800233a:	9a07      	ldr	r2, [sp, #28]
 800233c:	2100      	movs	r1, #0
 800233e:	200a      	movs	r0, #10
 8002340:	46a8      	mov	r8, r5
 8002342:	3501      	adds	r5, #1
 8002344:	f898 3000 	ldrb.w	r3, [r8]
 8002348:	3b30      	subs	r3, #48	; 0x30
 800234a:	2b09      	cmp	r3, #9
 800234c:	d96d      	bls.n	800242a <_vfiprintf_r+0x1a6>
 800234e:	b371      	cbz	r1, 80023ae <_vfiprintf_r+0x12a>
 8002350:	e026      	b.n	80023a0 <_vfiprintf_r+0x11c>
 8002352:	4b51      	ldr	r3, [pc, #324]	; (8002498 <_vfiprintf_r+0x214>)
 8002354:	429c      	cmp	r4, r3
 8002356:	d101      	bne.n	800235c <_vfiprintf_r+0xd8>
 8002358:	68b4      	ldr	r4, [r6, #8]
 800235a:	e7a3      	b.n	80022a4 <_vfiprintf_r+0x20>
 800235c:	4b4f      	ldr	r3, [pc, #316]	; (800249c <_vfiprintf_r+0x218>)
 800235e:	429c      	cmp	r4, r3
 8002360:	bf08      	it	eq
 8002362:	68f4      	ldreq	r4, [r6, #12]
 8002364:	e79e      	b.n	80022a4 <_vfiprintf_r+0x20>
 8002366:	4621      	mov	r1, r4
 8002368:	4630      	mov	r0, r6
 800236a:	f7ff fc67 	bl	8001c3c <__swsetup_r>
 800236e:	2800      	cmp	r0, #0
 8002370:	d09e      	beq.n	80022b0 <_vfiprintf_r+0x2c>
 8002372:	f04f 30ff 	mov.w	r0, #4294967295
 8002376:	b01d      	add	sp, #116	; 0x74
 8002378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800237c:	2b25      	cmp	r3, #37	; 0x25
 800237e:	d0a7      	beq.n	80022d0 <_vfiprintf_r+0x4c>
 8002380:	46a8      	mov	r8, r5
 8002382:	e7a0      	b.n	80022c6 <_vfiprintf_r+0x42>
 8002384:	4a43      	ldr	r2, [pc, #268]	; (8002494 <_vfiprintf_r+0x210>)
 8002386:	1a80      	subs	r0, r0, r2
 8002388:	fa0b f000 	lsl.w	r0, fp, r0
 800238c:	4318      	orrs	r0, r3
 800238e:	9004      	str	r0, [sp, #16]
 8002390:	4645      	mov	r5, r8
 8002392:	e7bb      	b.n	800230c <_vfiprintf_r+0x88>
 8002394:	9a03      	ldr	r2, [sp, #12]
 8002396:	1d11      	adds	r1, r2, #4
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	9103      	str	r1, [sp, #12]
 800239c:	2a00      	cmp	r2, #0
 800239e:	db01      	blt.n	80023a4 <_vfiprintf_r+0x120>
 80023a0:	9207      	str	r2, [sp, #28]
 80023a2:	e004      	b.n	80023ae <_vfiprintf_r+0x12a>
 80023a4:	4252      	negs	r2, r2
 80023a6:	f043 0302 	orr.w	r3, r3, #2
 80023aa:	9207      	str	r2, [sp, #28]
 80023ac:	9304      	str	r3, [sp, #16]
 80023ae:	f898 3000 	ldrb.w	r3, [r8]
 80023b2:	2b2e      	cmp	r3, #46	; 0x2e
 80023b4:	d110      	bne.n	80023d8 <_vfiprintf_r+0x154>
 80023b6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80023ba:	2b2a      	cmp	r3, #42	; 0x2a
 80023bc:	f108 0101 	add.w	r1, r8, #1
 80023c0:	d137      	bne.n	8002432 <_vfiprintf_r+0x1ae>
 80023c2:	9b03      	ldr	r3, [sp, #12]
 80023c4:	1d1a      	adds	r2, r3, #4
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	9203      	str	r2, [sp, #12]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	bfb8      	it	lt
 80023ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80023d2:	f108 0802 	add.w	r8, r8, #2
 80023d6:	9305      	str	r3, [sp, #20]
 80023d8:	4d31      	ldr	r5, [pc, #196]	; (80024a0 <_vfiprintf_r+0x21c>)
 80023da:	f898 1000 	ldrb.w	r1, [r8]
 80023de:	2203      	movs	r2, #3
 80023e0:	4628      	mov	r0, r5
 80023e2:	f7fd fef5 	bl	80001d0 <memchr>
 80023e6:	b140      	cbz	r0, 80023fa <_vfiprintf_r+0x176>
 80023e8:	2340      	movs	r3, #64	; 0x40
 80023ea:	1b40      	subs	r0, r0, r5
 80023ec:	fa03 f000 	lsl.w	r0, r3, r0
 80023f0:	9b04      	ldr	r3, [sp, #16]
 80023f2:	4303      	orrs	r3, r0
 80023f4:	9304      	str	r3, [sp, #16]
 80023f6:	f108 0801 	add.w	r8, r8, #1
 80023fa:	f898 1000 	ldrb.w	r1, [r8]
 80023fe:	4829      	ldr	r0, [pc, #164]	; (80024a4 <_vfiprintf_r+0x220>)
 8002400:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002404:	2206      	movs	r2, #6
 8002406:	f108 0701 	add.w	r7, r8, #1
 800240a:	f7fd fee1 	bl	80001d0 <memchr>
 800240e:	2800      	cmp	r0, #0
 8002410:	d034      	beq.n	800247c <_vfiprintf_r+0x1f8>
 8002412:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <_vfiprintf_r+0x224>)
 8002414:	bb03      	cbnz	r3, 8002458 <_vfiprintf_r+0x1d4>
 8002416:	9b03      	ldr	r3, [sp, #12]
 8002418:	3307      	adds	r3, #7
 800241a:	f023 0307 	bic.w	r3, r3, #7
 800241e:	3308      	adds	r3, #8
 8002420:	9303      	str	r3, [sp, #12]
 8002422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002424:	444b      	add	r3, r9
 8002426:	9309      	str	r3, [sp, #36]	; 0x24
 8002428:	e74c      	b.n	80022c4 <_vfiprintf_r+0x40>
 800242a:	fb00 3202 	mla	r2, r0, r2, r3
 800242e:	2101      	movs	r1, #1
 8002430:	e786      	b.n	8002340 <_vfiprintf_r+0xbc>
 8002432:	2300      	movs	r3, #0
 8002434:	9305      	str	r3, [sp, #20]
 8002436:	4618      	mov	r0, r3
 8002438:	250a      	movs	r5, #10
 800243a:	4688      	mov	r8, r1
 800243c:	3101      	adds	r1, #1
 800243e:	f898 2000 	ldrb.w	r2, [r8]
 8002442:	3a30      	subs	r2, #48	; 0x30
 8002444:	2a09      	cmp	r2, #9
 8002446:	d903      	bls.n	8002450 <_vfiprintf_r+0x1cc>
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0c5      	beq.n	80023d8 <_vfiprintf_r+0x154>
 800244c:	9005      	str	r0, [sp, #20]
 800244e:	e7c3      	b.n	80023d8 <_vfiprintf_r+0x154>
 8002450:	fb05 2000 	mla	r0, r5, r0, r2
 8002454:	2301      	movs	r3, #1
 8002456:	e7f0      	b.n	800243a <_vfiprintf_r+0x1b6>
 8002458:	ab03      	add	r3, sp, #12
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	4622      	mov	r2, r4
 800245e:	4b13      	ldr	r3, [pc, #76]	; (80024ac <_vfiprintf_r+0x228>)
 8002460:	a904      	add	r1, sp, #16
 8002462:	4630      	mov	r0, r6
 8002464:	f3af 8000 	nop.w
 8002468:	f1b0 3fff 	cmp.w	r0, #4294967295
 800246c:	4681      	mov	r9, r0
 800246e:	d1d8      	bne.n	8002422 <_vfiprintf_r+0x19e>
 8002470:	89a3      	ldrh	r3, [r4, #12]
 8002472:	065b      	lsls	r3, r3, #25
 8002474:	f53f af7d 	bmi.w	8002372 <_vfiprintf_r+0xee>
 8002478:	9809      	ldr	r0, [sp, #36]	; 0x24
 800247a:	e77c      	b.n	8002376 <_vfiprintf_r+0xf2>
 800247c:	ab03      	add	r3, sp, #12
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	4622      	mov	r2, r4
 8002482:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <_vfiprintf_r+0x228>)
 8002484:	a904      	add	r1, sp, #16
 8002486:	4630      	mov	r0, r6
 8002488:	f000 f888 	bl	800259c <_printf_i>
 800248c:	e7ec      	b.n	8002468 <_vfiprintf_r+0x1e4>
 800248e:	bf00      	nop
 8002490:	080029e4 	.word	0x080029e4
 8002494:	08002a24 	.word	0x08002a24
 8002498:	08002a04 	.word	0x08002a04
 800249c:	080029c4 	.word	0x080029c4
 80024a0:	08002a2a 	.word	0x08002a2a
 80024a4:	08002a2e 	.word	0x08002a2e
 80024a8:	00000000 	.word	0x00000000
 80024ac:	08002261 	.word	0x08002261

080024b0 <_printf_common>:
 80024b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024b4:	4691      	mov	r9, r2
 80024b6:	461f      	mov	r7, r3
 80024b8:	688a      	ldr	r2, [r1, #8]
 80024ba:	690b      	ldr	r3, [r1, #16]
 80024bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80024c0:	4293      	cmp	r3, r2
 80024c2:	bfb8      	it	lt
 80024c4:	4613      	movlt	r3, r2
 80024c6:	f8c9 3000 	str.w	r3, [r9]
 80024ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80024ce:	4606      	mov	r6, r0
 80024d0:	460c      	mov	r4, r1
 80024d2:	b112      	cbz	r2, 80024da <_printf_common+0x2a>
 80024d4:	3301      	adds	r3, #1
 80024d6:	f8c9 3000 	str.w	r3, [r9]
 80024da:	6823      	ldr	r3, [r4, #0]
 80024dc:	0699      	lsls	r1, r3, #26
 80024de:	bf42      	ittt	mi
 80024e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80024e4:	3302      	addmi	r3, #2
 80024e6:	f8c9 3000 	strmi.w	r3, [r9]
 80024ea:	6825      	ldr	r5, [r4, #0]
 80024ec:	f015 0506 	ands.w	r5, r5, #6
 80024f0:	d107      	bne.n	8002502 <_printf_common+0x52>
 80024f2:	f104 0a19 	add.w	sl, r4, #25
 80024f6:	68e3      	ldr	r3, [r4, #12]
 80024f8:	f8d9 2000 	ldr.w	r2, [r9]
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	429d      	cmp	r5, r3
 8002500:	db29      	blt.n	8002556 <_printf_common+0xa6>
 8002502:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002506:	6822      	ldr	r2, [r4, #0]
 8002508:	3300      	adds	r3, #0
 800250a:	bf18      	it	ne
 800250c:	2301      	movne	r3, #1
 800250e:	0692      	lsls	r2, r2, #26
 8002510:	d42e      	bmi.n	8002570 <_printf_common+0xc0>
 8002512:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002516:	4639      	mov	r1, r7
 8002518:	4630      	mov	r0, r6
 800251a:	47c0      	blx	r8
 800251c:	3001      	adds	r0, #1
 800251e:	d021      	beq.n	8002564 <_printf_common+0xb4>
 8002520:	6823      	ldr	r3, [r4, #0]
 8002522:	68e5      	ldr	r5, [r4, #12]
 8002524:	f8d9 2000 	ldr.w	r2, [r9]
 8002528:	f003 0306 	and.w	r3, r3, #6
 800252c:	2b04      	cmp	r3, #4
 800252e:	bf08      	it	eq
 8002530:	1aad      	subeq	r5, r5, r2
 8002532:	68a3      	ldr	r3, [r4, #8]
 8002534:	6922      	ldr	r2, [r4, #16]
 8002536:	bf0c      	ite	eq
 8002538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800253c:	2500      	movne	r5, #0
 800253e:	4293      	cmp	r3, r2
 8002540:	bfc4      	itt	gt
 8002542:	1a9b      	subgt	r3, r3, r2
 8002544:	18ed      	addgt	r5, r5, r3
 8002546:	f04f 0900 	mov.w	r9, #0
 800254a:	341a      	adds	r4, #26
 800254c:	454d      	cmp	r5, r9
 800254e:	d11b      	bne.n	8002588 <_printf_common+0xd8>
 8002550:	2000      	movs	r0, #0
 8002552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002556:	2301      	movs	r3, #1
 8002558:	4652      	mov	r2, sl
 800255a:	4639      	mov	r1, r7
 800255c:	4630      	mov	r0, r6
 800255e:	47c0      	blx	r8
 8002560:	3001      	adds	r0, #1
 8002562:	d103      	bne.n	800256c <_printf_common+0xbc>
 8002564:	f04f 30ff 	mov.w	r0, #4294967295
 8002568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800256c:	3501      	adds	r5, #1
 800256e:	e7c2      	b.n	80024f6 <_printf_common+0x46>
 8002570:	18e1      	adds	r1, r4, r3
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	2030      	movs	r0, #48	; 0x30
 8002576:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800257a:	4422      	add	r2, r4
 800257c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002580:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002584:	3302      	adds	r3, #2
 8002586:	e7c4      	b.n	8002512 <_printf_common+0x62>
 8002588:	2301      	movs	r3, #1
 800258a:	4622      	mov	r2, r4
 800258c:	4639      	mov	r1, r7
 800258e:	4630      	mov	r0, r6
 8002590:	47c0      	blx	r8
 8002592:	3001      	adds	r0, #1
 8002594:	d0e6      	beq.n	8002564 <_printf_common+0xb4>
 8002596:	f109 0901 	add.w	r9, r9, #1
 800259a:	e7d7      	b.n	800254c <_printf_common+0x9c>

0800259c <_printf_i>:
 800259c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025a0:	4617      	mov	r7, r2
 80025a2:	7e0a      	ldrb	r2, [r1, #24]
 80025a4:	b085      	sub	sp, #20
 80025a6:	2a6e      	cmp	r2, #110	; 0x6e
 80025a8:	4698      	mov	r8, r3
 80025aa:	4606      	mov	r6, r0
 80025ac:	460c      	mov	r4, r1
 80025ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80025b0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80025b4:	f000 80bc 	beq.w	8002730 <_printf_i+0x194>
 80025b8:	d81a      	bhi.n	80025f0 <_printf_i+0x54>
 80025ba:	2a63      	cmp	r2, #99	; 0x63
 80025bc:	d02e      	beq.n	800261c <_printf_i+0x80>
 80025be:	d80a      	bhi.n	80025d6 <_printf_i+0x3a>
 80025c0:	2a00      	cmp	r2, #0
 80025c2:	f000 80c8 	beq.w	8002756 <_printf_i+0x1ba>
 80025c6:	2a58      	cmp	r2, #88	; 0x58
 80025c8:	f000 808a 	beq.w	80026e0 <_printf_i+0x144>
 80025cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025d0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80025d4:	e02a      	b.n	800262c <_printf_i+0x90>
 80025d6:	2a64      	cmp	r2, #100	; 0x64
 80025d8:	d001      	beq.n	80025de <_printf_i+0x42>
 80025da:	2a69      	cmp	r2, #105	; 0x69
 80025dc:	d1f6      	bne.n	80025cc <_printf_i+0x30>
 80025de:	6821      	ldr	r1, [r4, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80025e6:	d023      	beq.n	8002630 <_printf_i+0x94>
 80025e8:	1d11      	adds	r1, r2, #4
 80025ea:	6019      	str	r1, [r3, #0]
 80025ec:	6813      	ldr	r3, [r2, #0]
 80025ee:	e027      	b.n	8002640 <_printf_i+0xa4>
 80025f0:	2a73      	cmp	r2, #115	; 0x73
 80025f2:	f000 80b4 	beq.w	800275e <_printf_i+0x1c2>
 80025f6:	d808      	bhi.n	800260a <_printf_i+0x6e>
 80025f8:	2a6f      	cmp	r2, #111	; 0x6f
 80025fa:	d02a      	beq.n	8002652 <_printf_i+0xb6>
 80025fc:	2a70      	cmp	r2, #112	; 0x70
 80025fe:	d1e5      	bne.n	80025cc <_printf_i+0x30>
 8002600:	680a      	ldr	r2, [r1, #0]
 8002602:	f042 0220 	orr.w	r2, r2, #32
 8002606:	600a      	str	r2, [r1, #0]
 8002608:	e003      	b.n	8002612 <_printf_i+0x76>
 800260a:	2a75      	cmp	r2, #117	; 0x75
 800260c:	d021      	beq.n	8002652 <_printf_i+0xb6>
 800260e:	2a78      	cmp	r2, #120	; 0x78
 8002610:	d1dc      	bne.n	80025cc <_printf_i+0x30>
 8002612:	2278      	movs	r2, #120	; 0x78
 8002614:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002618:	496e      	ldr	r1, [pc, #440]	; (80027d4 <_printf_i+0x238>)
 800261a:	e064      	b.n	80026e6 <_printf_i+0x14a>
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002622:	1d11      	adds	r1, r2, #4
 8002624:	6019      	str	r1, [r3, #0]
 8002626:	6813      	ldr	r3, [r2, #0]
 8002628:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800262c:	2301      	movs	r3, #1
 800262e:	e0a3      	b.n	8002778 <_printf_i+0x1dc>
 8002630:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002634:	f102 0104 	add.w	r1, r2, #4
 8002638:	6019      	str	r1, [r3, #0]
 800263a:	d0d7      	beq.n	80025ec <_printf_i+0x50>
 800263c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002640:	2b00      	cmp	r3, #0
 8002642:	da03      	bge.n	800264c <_printf_i+0xb0>
 8002644:	222d      	movs	r2, #45	; 0x2d
 8002646:	425b      	negs	r3, r3
 8002648:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800264c:	4962      	ldr	r1, [pc, #392]	; (80027d8 <_printf_i+0x23c>)
 800264e:	220a      	movs	r2, #10
 8002650:	e017      	b.n	8002682 <_printf_i+0xe6>
 8002652:	6820      	ldr	r0, [r4, #0]
 8002654:	6819      	ldr	r1, [r3, #0]
 8002656:	f010 0f80 	tst.w	r0, #128	; 0x80
 800265a:	d003      	beq.n	8002664 <_printf_i+0xc8>
 800265c:	1d08      	adds	r0, r1, #4
 800265e:	6018      	str	r0, [r3, #0]
 8002660:	680b      	ldr	r3, [r1, #0]
 8002662:	e006      	b.n	8002672 <_printf_i+0xd6>
 8002664:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002668:	f101 0004 	add.w	r0, r1, #4
 800266c:	6018      	str	r0, [r3, #0]
 800266e:	d0f7      	beq.n	8002660 <_printf_i+0xc4>
 8002670:	880b      	ldrh	r3, [r1, #0]
 8002672:	4959      	ldr	r1, [pc, #356]	; (80027d8 <_printf_i+0x23c>)
 8002674:	2a6f      	cmp	r2, #111	; 0x6f
 8002676:	bf14      	ite	ne
 8002678:	220a      	movne	r2, #10
 800267a:	2208      	moveq	r2, #8
 800267c:	2000      	movs	r0, #0
 800267e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002682:	6865      	ldr	r5, [r4, #4]
 8002684:	60a5      	str	r5, [r4, #8]
 8002686:	2d00      	cmp	r5, #0
 8002688:	f2c0 809c 	blt.w	80027c4 <_printf_i+0x228>
 800268c:	6820      	ldr	r0, [r4, #0]
 800268e:	f020 0004 	bic.w	r0, r0, #4
 8002692:	6020      	str	r0, [r4, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d13f      	bne.n	8002718 <_printf_i+0x17c>
 8002698:	2d00      	cmp	r5, #0
 800269a:	f040 8095 	bne.w	80027c8 <_printf_i+0x22c>
 800269e:	4675      	mov	r5, lr
 80026a0:	2a08      	cmp	r2, #8
 80026a2:	d10b      	bne.n	80026bc <_printf_i+0x120>
 80026a4:	6823      	ldr	r3, [r4, #0]
 80026a6:	07da      	lsls	r2, r3, #31
 80026a8:	d508      	bpl.n	80026bc <_printf_i+0x120>
 80026aa:	6923      	ldr	r3, [r4, #16]
 80026ac:	6862      	ldr	r2, [r4, #4]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	bfde      	ittt	le
 80026b2:	2330      	movle	r3, #48	; 0x30
 80026b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80026b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80026bc:	ebae 0305 	sub.w	r3, lr, r5
 80026c0:	6123      	str	r3, [r4, #16]
 80026c2:	f8cd 8000 	str.w	r8, [sp]
 80026c6:	463b      	mov	r3, r7
 80026c8:	aa03      	add	r2, sp, #12
 80026ca:	4621      	mov	r1, r4
 80026cc:	4630      	mov	r0, r6
 80026ce:	f7ff feef 	bl	80024b0 <_printf_common>
 80026d2:	3001      	adds	r0, #1
 80026d4:	d155      	bne.n	8002782 <_printf_i+0x1e6>
 80026d6:	f04f 30ff 	mov.w	r0, #4294967295
 80026da:	b005      	add	sp, #20
 80026dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80026e0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80026e4:	493c      	ldr	r1, [pc, #240]	; (80027d8 <_printf_i+0x23c>)
 80026e6:	6822      	ldr	r2, [r4, #0]
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	f012 0f80 	tst.w	r2, #128	; 0x80
 80026ee:	f100 0504 	add.w	r5, r0, #4
 80026f2:	601d      	str	r5, [r3, #0]
 80026f4:	d001      	beq.n	80026fa <_printf_i+0x15e>
 80026f6:	6803      	ldr	r3, [r0, #0]
 80026f8:	e002      	b.n	8002700 <_printf_i+0x164>
 80026fa:	0655      	lsls	r5, r2, #25
 80026fc:	d5fb      	bpl.n	80026f6 <_printf_i+0x15a>
 80026fe:	8803      	ldrh	r3, [r0, #0]
 8002700:	07d0      	lsls	r0, r2, #31
 8002702:	bf44      	itt	mi
 8002704:	f042 0220 	orrmi.w	r2, r2, #32
 8002708:	6022      	strmi	r2, [r4, #0]
 800270a:	b91b      	cbnz	r3, 8002714 <_printf_i+0x178>
 800270c:	6822      	ldr	r2, [r4, #0]
 800270e:	f022 0220 	bic.w	r2, r2, #32
 8002712:	6022      	str	r2, [r4, #0]
 8002714:	2210      	movs	r2, #16
 8002716:	e7b1      	b.n	800267c <_printf_i+0xe0>
 8002718:	4675      	mov	r5, lr
 800271a:	fbb3 f0f2 	udiv	r0, r3, r2
 800271e:	fb02 3310 	mls	r3, r2, r0, r3
 8002722:	5ccb      	ldrb	r3, [r1, r3]
 8002724:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002728:	4603      	mov	r3, r0
 800272a:	2800      	cmp	r0, #0
 800272c:	d1f5      	bne.n	800271a <_printf_i+0x17e>
 800272e:	e7b7      	b.n	80026a0 <_printf_i+0x104>
 8002730:	6808      	ldr	r0, [r1, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	6949      	ldr	r1, [r1, #20]
 8002736:	f010 0f80 	tst.w	r0, #128	; 0x80
 800273a:	d004      	beq.n	8002746 <_printf_i+0x1aa>
 800273c:	1d10      	adds	r0, r2, #4
 800273e:	6018      	str	r0, [r3, #0]
 8002740:	6813      	ldr	r3, [r2, #0]
 8002742:	6019      	str	r1, [r3, #0]
 8002744:	e007      	b.n	8002756 <_printf_i+0x1ba>
 8002746:	f010 0f40 	tst.w	r0, #64	; 0x40
 800274a:	f102 0004 	add.w	r0, r2, #4
 800274e:	6018      	str	r0, [r3, #0]
 8002750:	6813      	ldr	r3, [r2, #0]
 8002752:	d0f6      	beq.n	8002742 <_printf_i+0x1a6>
 8002754:	8019      	strh	r1, [r3, #0]
 8002756:	2300      	movs	r3, #0
 8002758:	6123      	str	r3, [r4, #16]
 800275a:	4675      	mov	r5, lr
 800275c:	e7b1      	b.n	80026c2 <_printf_i+0x126>
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	1d11      	adds	r1, r2, #4
 8002762:	6019      	str	r1, [r3, #0]
 8002764:	6815      	ldr	r5, [r2, #0]
 8002766:	6862      	ldr	r2, [r4, #4]
 8002768:	2100      	movs	r1, #0
 800276a:	4628      	mov	r0, r5
 800276c:	f7fd fd30 	bl	80001d0 <memchr>
 8002770:	b108      	cbz	r0, 8002776 <_printf_i+0x1da>
 8002772:	1b40      	subs	r0, r0, r5
 8002774:	6060      	str	r0, [r4, #4]
 8002776:	6863      	ldr	r3, [r4, #4]
 8002778:	6123      	str	r3, [r4, #16]
 800277a:	2300      	movs	r3, #0
 800277c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002780:	e79f      	b.n	80026c2 <_printf_i+0x126>
 8002782:	6923      	ldr	r3, [r4, #16]
 8002784:	462a      	mov	r2, r5
 8002786:	4639      	mov	r1, r7
 8002788:	4630      	mov	r0, r6
 800278a:	47c0      	blx	r8
 800278c:	3001      	adds	r0, #1
 800278e:	d0a2      	beq.n	80026d6 <_printf_i+0x13a>
 8002790:	6823      	ldr	r3, [r4, #0]
 8002792:	079b      	lsls	r3, r3, #30
 8002794:	d507      	bpl.n	80027a6 <_printf_i+0x20a>
 8002796:	2500      	movs	r5, #0
 8002798:	f104 0919 	add.w	r9, r4, #25
 800279c:	68e3      	ldr	r3, [r4, #12]
 800279e:	9a03      	ldr	r2, [sp, #12]
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	429d      	cmp	r5, r3
 80027a4:	db05      	blt.n	80027b2 <_printf_i+0x216>
 80027a6:	68e0      	ldr	r0, [r4, #12]
 80027a8:	9b03      	ldr	r3, [sp, #12]
 80027aa:	4298      	cmp	r0, r3
 80027ac:	bfb8      	it	lt
 80027ae:	4618      	movlt	r0, r3
 80027b0:	e793      	b.n	80026da <_printf_i+0x13e>
 80027b2:	2301      	movs	r3, #1
 80027b4:	464a      	mov	r2, r9
 80027b6:	4639      	mov	r1, r7
 80027b8:	4630      	mov	r0, r6
 80027ba:	47c0      	blx	r8
 80027bc:	3001      	adds	r0, #1
 80027be:	d08a      	beq.n	80026d6 <_printf_i+0x13a>
 80027c0:	3501      	adds	r5, #1
 80027c2:	e7eb      	b.n	800279c <_printf_i+0x200>
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1a7      	bne.n	8002718 <_printf_i+0x17c>
 80027c8:	780b      	ldrb	r3, [r1, #0]
 80027ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027d2:	e765      	b.n	80026a0 <_printf_i+0x104>
 80027d4:	08002a46 	.word	0x08002a46
 80027d8:	08002a35 	.word	0x08002a35

080027dc <_sbrk_r>:
 80027dc:	b538      	push	{r3, r4, r5, lr}
 80027de:	4c06      	ldr	r4, [pc, #24]	; (80027f8 <_sbrk_r+0x1c>)
 80027e0:	2300      	movs	r3, #0
 80027e2:	4605      	mov	r5, r0
 80027e4:	4608      	mov	r0, r1
 80027e6:	6023      	str	r3, [r4, #0]
 80027e8:	f7fe ff94 	bl	8001714 <_sbrk>
 80027ec:	1c43      	adds	r3, r0, #1
 80027ee:	d102      	bne.n	80027f6 <_sbrk_r+0x1a>
 80027f0:	6823      	ldr	r3, [r4, #0]
 80027f2:	b103      	cbz	r3, 80027f6 <_sbrk_r+0x1a>
 80027f4:	602b      	str	r3, [r5, #0]
 80027f6:	bd38      	pop	{r3, r4, r5, pc}
 80027f8:	200003fc 	.word	0x200003fc

080027fc <__sread>:
 80027fc:	b510      	push	{r4, lr}
 80027fe:	460c      	mov	r4, r1
 8002800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002804:	f000 f896 	bl	8002934 <_read_r>
 8002808:	2800      	cmp	r0, #0
 800280a:	bfab      	itete	ge
 800280c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800280e:	89a3      	ldrhlt	r3, [r4, #12]
 8002810:	181b      	addge	r3, r3, r0
 8002812:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002816:	bfac      	ite	ge
 8002818:	6563      	strge	r3, [r4, #84]	; 0x54
 800281a:	81a3      	strhlt	r3, [r4, #12]
 800281c:	bd10      	pop	{r4, pc}

0800281e <__swrite>:
 800281e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002822:	461f      	mov	r7, r3
 8002824:	898b      	ldrh	r3, [r1, #12]
 8002826:	05db      	lsls	r3, r3, #23
 8002828:	4605      	mov	r5, r0
 800282a:	460c      	mov	r4, r1
 800282c:	4616      	mov	r6, r2
 800282e:	d505      	bpl.n	800283c <__swrite+0x1e>
 8002830:	2302      	movs	r3, #2
 8002832:	2200      	movs	r2, #0
 8002834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002838:	f000 f868 	bl	800290c <_lseek_r>
 800283c:	89a3      	ldrh	r3, [r4, #12]
 800283e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002842:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002846:	81a3      	strh	r3, [r4, #12]
 8002848:	4632      	mov	r2, r6
 800284a:	463b      	mov	r3, r7
 800284c:	4628      	mov	r0, r5
 800284e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002852:	f000 b817 	b.w	8002884 <_write_r>

08002856 <__sseek>:
 8002856:	b510      	push	{r4, lr}
 8002858:	460c      	mov	r4, r1
 800285a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800285e:	f000 f855 	bl	800290c <_lseek_r>
 8002862:	1c43      	adds	r3, r0, #1
 8002864:	89a3      	ldrh	r3, [r4, #12]
 8002866:	bf15      	itete	ne
 8002868:	6560      	strne	r0, [r4, #84]	; 0x54
 800286a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800286e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002872:	81a3      	strheq	r3, [r4, #12]
 8002874:	bf18      	it	ne
 8002876:	81a3      	strhne	r3, [r4, #12]
 8002878:	bd10      	pop	{r4, pc}

0800287a <__sclose>:
 800287a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800287e:	f000 b813 	b.w	80028a8 <_close_r>
	...

08002884 <_write_r>:
 8002884:	b538      	push	{r3, r4, r5, lr}
 8002886:	4c07      	ldr	r4, [pc, #28]	; (80028a4 <_write_r+0x20>)
 8002888:	4605      	mov	r5, r0
 800288a:	4608      	mov	r0, r1
 800288c:	4611      	mov	r1, r2
 800288e:	2200      	movs	r2, #0
 8002890:	6022      	str	r2, [r4, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	f7fe fe14 	bl	80014c0 <_write>
 8002898:	1c43      	adds	r3, r0, #1
 800289a:	d102      	bne.n	80028a2 <_write_r+0x1e>
 800289c:	6823      	ldr	r3, [r4, #0]
 800289e:	b103      	cbz	r3, 80028a2 <_write_r+0x1e>
 80028a0:	602b      	str	r3, [r5, #0]
 80028a2:	bd38      	pop	{r3, r4, r5, pc}
 80028a4:	200003fc 	.word	0x200003fc

080028a8 <_close_r>:
 80028a8:	b538      	push	{r3, r4, r5, lr}
 80028aa:	4c06      	ldr	r4, [pc, #24]	; (80028c4 <_close_r+0x1c>)
 80028ac:	2300      	movs	r3, #0
 80028ae:	4605      	mov	r5, r0
 80028b0:	4608      	mov	r0, r1
 80028b2:	6023      	str	r3, [r4, #0]
 80028b4:	f7fe ff48 	bl	8001748 <_close>
 80028b8:	1c43      	adds	r3, r0, #1
 80028ba:	d102      	bne.n	80028c2 <_close_r+0x1a>
 80028bc:	6823      	ldr	r3, [r4, #0]
 80028be:	b103      	cbz	r3, 80028c2 <_close_r+0x1a>
 80028c0:	602b      	str	r3, [r5, #0]
 80028c2:	bd38      	pop	{r3, r4, r5, pc}
 80028c4:	200003fc 	.word	0x200003fc

080028c8 <_fstat_r>:
 80028c8:	b538      	push	{r3, r4, r5, lr}
 80028ca:	4c07      	ldr	r4, [pc, #28]	; (80028e8 <_fstat_r+0x20>)
 80028cc:	2300      	movs	r3, #0
 80028ce:	4605      	mov	r5, r0
 80028d0:	4608      	mov	r0, r1
 80028d2:	4611      	mov	r1, r2
 80028d4:	6023      	str	r3, [r4, #0]
 80028d6:	f7fe ff3a 	bl	800174e <_fstat>
 80028da:	1c43      	adds	r3, r0, #1
 80028dc:	d102      	bne.n	80028e4 <_fstat_r+0x1c>
 80028de:	6823      	ldr	r3, [r4, #0]
 80028e0:	b103      	cbz	r3, 80028e4 <_fstat_r+0x1c>
 80028e2:	602b      	str	r3, [r5, #0]
 80028e4:	bd38      	pop	{r3, r4, r5, pc}
 80028e6:	bf00      	nop
 80028e8:	200003fc 	.word	0x200003fc

080028ec <_isatty_r>:
 80028ec:	b538      	push	{r3, r4, r5, lr}
 80028ee:	4c06      	ldr	r4, [pc, #24]	; (8002908 <_isatty_r+0x1c>)
 80028f0:	2300      	movs	r3, #0
 80028f2:	4605      	mov	r5, r0
 80028f4:	4608      	mov	r0, r1
 80028f6:	6023      	str	r3, [r4, #0]
 80028f8:	f7fe ff2e 	bl	8001758 <_isatty>
 80028fc:	1c43      	adds	r3, r0, #1
 80028fe:	d102      	bne.n	8002906 <_isatty_r+0x1a>
 8002900:	6823      	ldr	r3, [r4, #0]
 8002902:	b103      	cbz	r3, 8002906 <_isatty_r+0x1a>
 8002904:	602b      	str	r3, [r5, #0]
 8002906:	bd38      	pop	{r3, r4, r5, pc}
 8002908:	200003fc 	.word	0x200003fc

0800290c <_lseek_r>:
 800290c:	b538      	push	{r3, r4, r5, lr}
 800290e:	4c07      	ldr	r4, [pc, #28]	; (800292c <_lseek_r+0x20>)
 8002910:	4605      	mov	r5, r0
 8002912:	4608      	mov	r0, r1
 8002914:	4611      	mov	r1, r2
 8002916:	2200      	movs	r2, #0
 8002918:	6022      	str	r2, [r4, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	f7fe ff1e 	bl	800175c <_lseek>
 8002920:	1c43      	adds	r3, r0, #1
 8002922:	d102      	bne.n	800292a <_lseek_r+0x1e>
 8002924:	6823      	ldr	r3, [r4, #0]
 8002926:	b103      	cbz	r3, 800292a <_lseek_r+0x1e>
 8002928:	602b      	str	r3, [r5, #0]
 800292a:	bd38      	pop	{r3, r4, r5, pc}
 800292c:	200003fc 	.word	0x200003fc

08002930 <__malloc_lock>:
 8002930:	4770      	bx	lr

08002932 <__malloc_unlock>:
 8002932:	4770      	bx	lr

08002934 <_read_r>:
 8002934:	b538      	push	{r3, r4, r5, lr}
 8002936:	4c07      	ldr	r4, [pc, #28]	; (8002954 <_read_r+0x20>)
 8002938:	4605      	mov	r5, r0
 800293a:	4608      	mov	r0, r1
 800293c:	4611      	mov	r1, r2
 800293e:	2200      	movs	r2, #0
 8002940:	6022      	str	r2, [r4, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	f7fe fed8 	bl	80016f8 <_read>
 8002948:	1c43      	adds	r3, r0, #1
 800294a:	d102      	bne.n	8002952 <_read_r+0x1e>
 800294c:	6823      	ldr	r3, [r4, #0]
 800294e:	b103      	cbz	r3, 8002952 <_read_r+0x1e>
 8002950:	602b      	str	r3, [r5, #0]
 8002952:	bd38      	pop	{r3, r4, r5, pc}
 8002954:	200003fc 	.word	0x200003fc

08002958 <_init>:
 8002958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295a:	bf00      	nop
 800295c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295e:	bc08      	pop	{r3}
 8002960:	469e      	mov	lr, r3
 8002962:	4770      	bx	lr

08002964 <_fini>:
 8002964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002966:	bf00      	nop
 8002968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800296a:	bc08      	pop	{r3}
 800296c:	469e      	mov	lr, r3
 800296e:	4770      	bx	lr
